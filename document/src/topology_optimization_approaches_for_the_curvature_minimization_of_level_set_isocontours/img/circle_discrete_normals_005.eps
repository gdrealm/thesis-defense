%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: circle_discrete_normals_005.pdf
%%Creator: Adobe Acrobat 11.0.9
%%For: Hernan
%%CreationDate: 12/18/2014, 10:25:34 PM
%%BoundingBox: 0 0 540 540
%%HiResBoundingBox: 0 0 540 540
%%CropBox: 0 0 540 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1081 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2014-12-18T22:25:01-07:00"
   xmp:CreateDate="2014-12-18T22:25-07:00"
   xmp:MetadataDate="2014-12-18T22:25:01-07:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:a824da66-34ee-4d12-a87b-ac7704ba659b"
   xmpMM:InstanceID="uuid:c42a3636-e258-4e95-8859-51482bff2bf6"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Hernan</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
540 540 li
540 0 li
cp
clp
54 54 mo
486 54 li
486 486 li
54 486 li
cp
false sop
0 0 0 0 cmyk
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
54 54 mo
486 54 li
486 486 li
54 486 li
cp
.750179 .679652 .670191 .901488 cmyk
@
54 54 mo
270 54 li
270 270 li
54 270 li
cp
0 0 0 0 cmyk
ef
54 54 mo
270 54 li
270 270 li
54 270 li
cp
.750179 .679652 .670191 .901488 cmyk
@
270 270 mo
486 270 li
486 486 li
270 486 li
cp
0 0 0 0 cmyk
ef
270 270 mo
486 270 li
486 486 li
270 486 li
cp
.750179 .679652 .670191 .901488 cmyk
@
2.25 lw
[9 6.75 ] 0 dsh
270 162 mo
162 270 li
.742 .458381 .0308537 0 cmyk
@
270 162 mo
378 270 li
@
378 270 mo
270 378 li
@
270 378 mo
162 270 li
@
261 270 mo
261 265.029 265.029 261 270 261 cv
274.971 261 279 265.029 279 270 cv
279 274.971 274.971 279 270 279 cv
265.029 279 261 274.971 261 270 cv
0 0 0 0 cmyk
ef
2 lw
[] 0 dsh
261 270 mo
261 265.029 265.029 261 270 261 cv
274.971 261 279 265.029 279 270 cv
279 274.971 274.971 279 270 279 cv
265.029 279 261 274.971 261 270 cv
cp
.750179 .679652 .670191 .901488 cmyk
@
.75 lw
216 216 mo
263.111 263.111 li
@
1 lc
0 lj
261.344 256.393 mo
263.111 263.111 li
256.394 261.343 li
@
0 lc
1 lj
324 216 mo
276.889 263.111 li
@
1 lc
0 lj
278.656 256.393 mo
276.889 263.111 li
283.606 261.343 li
@
0 lc
1 lj
324 324 mo
276.889 276.889 li
@
1 lc
0 lj
278.656 283.607 mo
276.889 276.889 li
283.606 278.657 li
@
0 lc
1 lj
216 324 mo
263.111 276.889 li
@
1 lc
0 lj
261.344 283.607 mo
263.111 276.889 li
256.394 278.657 li
@
%ADOBeginSubsetFont: WGJAAA+CambriaMath-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (WGJAAA+CambriaMath)
%%Title: (WGJAAA+CambriaMath Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /WGJAAA+CambriaMath def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7324 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1814 <001C60D8A8C9B7D103264FA001D1A6EB35EF29274D0872418A9AFA9DFB
4443D7074057AB2E9FB021F73EDBA5E149B391F74BBE24578834FD7237B6982A
49A86DC56002928D54AB3702B7F3F8072EF307A650112D9701852DA8E507C83B
FD3A75204DD6FFC47A061E35B9AB6D5CDB9E18B508F956A3A36C39A9F2185798
E5660988E199F9A49ACB4BA54576DA8E832003F38613800BD8EC1215ADBBE664
08F5FE0FEDE5815F647D9097E0955171A5F1C132D09350ABD7459278AB28ACB2
EF9F4BCCE3484BEC0436638599BFDFE11BFD76EA011D94A008A9333AA31265B5
D3EC273F399232BA08406E4DA1D139FFEA19D4B6AE8108384ED212B23873C06D
C6263B7DF4C06BD0FD02> |
2264 <001C60D8A8C9B6F14C34166B26F31F8066F201185E9A5DF82F5A388943
12CD119502C9E024737B20483D126431C63A3A1049B6F14E64841010962F346F
C6B9169887834808253CDDC146D32F8AE052730EBB08F1EB631D45B47096F188
E72A412CE1C67F8FAD8F594A2B7A8D0AF3DFFECBA8DF145FBCC12BCC13EFE12B
930C5CB9D0A3EA351EB24988F4DEFA9CC3DACD2208146CF1926C563370FE94D2
5FB6D47E8F37811C21F53DFA62BDABA868D1F1E986267CE136F5> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /WGJAAA+CambriaMath-Identity-H /Identity-H 0 [/WGJAAA+CambriaMath] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FHSKMB+CambriaMath /WGJAAA+CambriaMath-Identity-H findfont ct_VMDictPut
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
95.6004 169.194 mo
(\007\026)sh
FHSKMB+CambriaMath [13.2 0 0 -13.2 0 0 ]msf
106.76 172.914 mo
(\010\330)sh
%ADOBeginSubsetFont: HIBBAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f328422c69a000000cc000000606376
7420030315980000012c0000089e6670676dde1e5576000009cc00000c54
676c7966abfd3ada000110440000026668656164f39ee89d000016200000
00366868656112c42fd40000165800000024686d7478f52ef4830000167c
000072706c6f63610039736c000088ec000072746d61787026a412a80000
fb60000000206e616d65a0a9559a0000fb80000003a370726570af20ed00
0000ff240000111f67646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00002ff420024ff00000000000000004d53202000c00000
fe000639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e0000405a65645f5e5d5c5b5a5958
5554524d4c4b4a4948474644434241403f3e3d3c3b3a3938373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c0118b0184358456ab0
194360b00c2344231020b00c4ef04d2fb000121b21231120332f592d2c01
18b0184358b0052bb000134bb0145058b100403859b0062b1b2123112033
2f592d2c0118b01843584eb0032510f221b000124d1b2045b00425b00425
234a6164b0285258212310d61bb0032510f221b0001259592d2cb01a4358
21211bb00225b0022549b00325b003254a612064b01050582121211bb003
25b0032549b0005058b0005058b8ffe238211bb0003821591bb0005258b0
1e38211bb0003821595959592d2c0118b0184358b0052bb000134bb01450
58b90000ffc03859b0062b1b21231120332f592d2c4e018a10b10c194344
b00014b1000ce2b00015b90000fff03800b0003cb0282bb0022510b0003c
2d2c0118b0002fb00114f2b00113b001154db000122d2c0118b0184358b0
052bb00013b90000ffe038b0062b1b21231120332f592d2c0118b0184358
45646a23456469b01943646060b00c2344231020b00cf02fb000121b2121
208a208a525811331b212159592d2c014bb0c85158b10b0a432343650a59
2d2c004bb0c8515800b10a0b4323430b592d2c00b00c2370b1010c3e01b0
0c2370b1020c453ab10200080d2d2cb0122bb0022545b00225456ab0408b
60b0022523442121212d2cb0132bb0022545b00225456ab8ffc08c60b002
2523442121212d2cb000b0122b2121212d2cb000b0132b2121212d2c014b
b0c85158b00643b00743650a592d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2cb1000325456854b01c4b505a
58b0032545b0032545606820b004252344b0042523441bb0032520456820
8a2344b00325456860b003252344592d2cb00325204568208a2344b00325
4564686560b00425b0016023442d2cb00943588721c01bb01243588745b0
112bb00d2344b00d7ae41b038a45186920b00d23448a8a8720b0a05158b0
112bb00d2344b00d7ae41b21b00d7ae4595959182d2c208a452345686044
2d2c456a422d2c01182f2d2c0118b0184358b00425b00425496423456469
b0408b6120b080626ab00225b00225618cb0194360b00c2344218a10b00c
f6211b21212121592d2c01b0184358b0022545b002254564606ab0032545
6a6120b00425456a208a8b65b0042523448cb00325234421211b20456a44
20456a44592d2c012045b00055b018435a584568234569b0408b6120b080
626a208a236120b003258b65b0042523448cb00325234421211b2121b019
2b592d2c018a8a45642345646164422d2cb00425b00425b0192bb0184358
b00425b00425b00325b01b2b01b0022543b04054b0022543b000545a58b0
03252045b040614459b0022543b00054b0022543b040545a58b004252045
b04060445959212121212d2cb0032520b0072587052e23208ab00425b007
25b0142b1021c4212d2cc02d2c4b525845441b2121592d2cb00243583ded
181bed592d2c4b505845441b2121592d2c01184b52588a2fed1b21212159
2d2c4b53234b515a58b003254568b003254568b003256054582121211bb0
0225456860b0032523442121591b212121592d2cb00243583dcd181bcd59
2d2cb002435c58462346608a8a462320468a608a61b8ff8062232010238a
b10c0c8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a
1b2121212121592d2c2045b0032546524bb013515b58b0022546206861b0
0325b003253f2321381b2111592d2c2045b00325465058b0022546206861
b00325b003253f2321381b2111592d2c004bb0c8515800b00743b006430b
592d2c8a10ec2d2cb00c4358211b2046b0005258b8fff0381bb010385959
2d2c20b0005558b8100063b003254564b00325456461b0005358b0021bb0
4061b00359254569535845441b2121591b21b0022545b00225456164b028
515845441b212159592d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
184b5358b00425b00425496423456469b0408b6120b080626ab00225b002
25618cb00c2344218a10b00cf6211b218a11231220392f592d2cb00225b0
02254964b0c05458b8fff838b008381b2121592d2cb0134358031b02592d
2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038
b0282b8a102320d023b0102bb0054358c01b3c59201011b00012012d2cb0
482b2d2c01b0022510d023c901b00113b0001410b0013cb001162d2c01b0
0013b001b0032549b0031738b001132d2c4b53234b515a5820458a60441b
2121592d2c184b5358b00425b004254964b00325b00325496468b0408b61
20b080626ab00225b00225618cb00c234421b004251023b00cf61bb00425
b0042511122320392f59cc21212d2c0118b0184358b0052546234564611b
21b00425b004254a59b00e23442310b00eec2310b00eec2d2cb01b435820
b0016045b000515820b0016020452068b0005558b0206044211b21212159
1b20b0016020452068b0005558b8ffe06044b01c4b50582045b02060441b
21591b21212159591b21592d2cb0022546206861b00325b003253f232138
2d2c462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a70
456020b0005058b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c20
35b001602d2cb0024354584b53234b515a58381b2121591b21212121592d
2c49b00e23442d2cb0024354584b53234b515a5820458a60441b2121591b
21212121592d2c8a10b002435821b0301ac9181bb0401a18ed592d2c4b53
234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c
4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002435458b0
462b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458
b0482b1b21212121592d2cb002435458b0492b1b212121592d2c4b52587d
1b7a592d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2c451868234b51582320452064
b04050587c59688a6059442d2cb00016b00225b0022501b001233e00b002
233eb10102060cb00a236542b00b234201b001233f00b002233fb1010206
0cb006236542b0072342b00116012d2c20b82000628a6023622d2cb00725
58001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b00625
5cb006255a58b0092b5920b005254ab0042547b004254760b0062547b080
6361b00225b0005558b00325b00725496359b0082558001b0159b00425b0
062549b009255cb009255a58b0092b59b0072546b0806361b0032520b000
5558631b2159612320b0005558b080631b21b08059b0592bb006255c5869
59b00425202010b00048233ab0062658001b0159b0052658b003252f598a
12233221212d2cb00625b00a2587b00625b009254ab0005358b00625b00a
251bb00925b0072559b00225b00225070cb005256323b00625636020b940
00040063535821b00426b00426b00a1bb94000040063655158b0042665b0
042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b0
07250b0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b0
0725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525
b0052507b00825b00b254923b00625b0062587b00a2510b00b25c15920b0
0051b800522378b00161b00225b00725b0072507b00a25b00d254961b080
62b00525b005250bb00a252338b00625b0062587b00825b008250bb00a25
10b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121
212121212121212121212d2c23b0005458b9400000001bb900004000598a
b0005458b9400000001bb90000400059b05b2b2d2c08b0005458b9400000
001bb900004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9
0000400059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d
2c204569442d2c0020b200400325b0062649618b3812342d000100000005
fd70ec3fbbc75f0f3cf5001b080000000000b9e6983d00000000cf5f08b8
f434ec4a16f118ef00000009000200010000000000010000063bfe390161
175af434fda416f1000100000000000000000000000000001c9c00>
<054400be0000000001c3000001c3000004fc000604e4007904800077054b
0078049a0079044b007904e30077057e0079029800790274001d05090079
044b00790686007505720075053a0077048b0079053a007704f8007903f8
007004be0042052f005a04d40016075f00160492001504900012044d005e
04fc000604fc000604fc000604fc000604fc000604fc000604fc000604fc
000604fc000604fc000606ee000006ee0000048000770480007704800077
0480007704800077054b007805510032049a0079049a0079049a0079049a
0079049a0079049a0079049a0079049a0079049a007904e3007704e30077
04e3007704e30077057e00790588007902980033029800790298001f0298
00010298004002980035029800140298007902980079050c00790274000d
05090079044b0079044b0079044b00790451000d04fa0079057200750572
00750572007505720075053a0077053a0077053a0077053a0077053a0077
053a0077053a0077053a0077053a0065053a0065076e007704f8007904f8
007904f8007903f8007003f8007003f8007003f8007003f8007004be0042
04be004204be0042052f005a052f005a052f005a052f005a052f005a052f
005a052f005a052f005a052f005a052f005a075f0016075f0016075f0016
075f001604900012049000120490001204900012044d005e044d005e044d
005e05720075055100320497007903e80050046100300387006904700069
03e70068026c004f03f4003f046a004002390053022100050432003f022c
003f06a8005304770053043f00690473004904600068034f00530370005e
02b50025046b0049040800130632001d03de00170408001403a3005103e8
005003e8005003e8005003e8005003e8005003e8005003e8005003e80050
03e8005003e8005006050050060500500387006903870069038700690387
006903870069056c00690470006903e7006803e7006803e7006803e70068
03e7006803e7006803e7006803e7006803e7006803f4003f03f4003f03f4
003f03f4003f046a0040046a003402390023023900530239fffe0239ffd3
0239001f023900150239fff00239005302390053045a00530221fff20432
003f043f0053022c003f0314003f022c00390278000d0302003f04770053
04770053047700530477005305850047043f0069043f0069043f0069043f
0069043f0069043f0069043f0069043f0069043f005b043f005b068c0069
034f0053034f0053034f00530370005e0370005e0370005e0370005e0370
005e04d8004f023c004f039b002502b5002502d30035046b0049046b0049
046b0049046b0049046b0049046b0049046b0049046b0049046b0049046b
00490632001d0632001d0632001d0632001d040800140408001404080014
0408001403a3005103a3005103a3005104680053043e006904610031045d
fffe0471006803ef006904aa006a0417006803d50068044d006904e30068
02610068023b00070476006803b7006805bb006504c40064048300690433
006804830069046a006803a4005e04390039049300470447001406a4001d
041b00160416001603db0050045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe061efffe061efffe
03ef006903ef006903ef006903ef006903ef006904aa006a04b200440417
006804170068041700680417006804170068041700680417006804170068
04170068044d0069044d0069044d0069044d006904e3006804ed00680261
003502610068026100130261ffe602610034026100290261000302610068
02610068049c0068023b00010476006803b7006803b7006803b7006803c5
0042046e006804c4006404c4006404c4006404c400640483006904830069
048300690483006904830069048300690483006904830069048300600483
006006790069046a0068046a0068046a006803a4005e03a4005e03a4005e
03a4005e03a4005e04390039043900390439003904930047049300470493
004704930047049300470493004704930047049300470493004704930047
06a4001d06a4001d06a4001d06a4001d0416001604160016041600160416
001603db005003db005003db005004c4006404b200440444006802ef004c
0346003802ab005d034e005d02ee005d01eb004b02f700410349004101c2
004e01b400150319004001b9004004db004e0353004e032c005d03500047
0346005c0284004e029b0056021c002e034b0047031300270497002f02e8
00240313002702bf004d06d1004f093d004f04d8004f06d6004f0942004f
04a5004f0711004f048d004f06f9004f069e004f090a004f0497004f0703
004f05800059050500590247003f0247001f0000fde60000fddd0247008b
024700720000fe600000fe30024700060247fff60000fdc30000fdb40247
00060247fff60000fdc40000fdb400e8ffbd0247ffda0247ffda0000fd98
0000fd9802470026024700170000fde40000fdd50247001b0247000c0000
fdd90000fdca0247fff60247ffec0000fdb40000fdaa0247004102470041
0000fdff0000fdff0247fffc0247fffa0000fdba0000fdb8024700c70247
00c70000fe850000fe850247003c0000fdfa024700880000fe460000fdf8
0000fe7901a40018021c0049021c00aa01a4006d060400f902a8006c02a8
006c024900c0024900b6024900b60361005c0361004b0361004b01c50069
01c5004701c5006901c500470301006903010047030100690301004701a4
002e02e2002f026c0064026c0064026c0064026c006403e7006403e70064
03e7006403e7006403ec003e028800f70400005a0400005a0800005a0800
005a0600005a0600005a038c00950242009901fa008e030e00b4030e002b
030e00b4030e002b02cd00e402cd002b02cd00e402cd002b0319005f0319
002b0319005f0319002b036b004e0422006d0422006d0400005804b40051
04fc000604e40079044a007904c40033049a0079044d005e057e0079053a
0077029800790509007904d80006068600750572007504930072053a0077
05650079048b00790462003004be004204dcfff106480074049200150643
0032056f003f04f3000605a6000006800000039a00000298004005e30000
063a000004dcfff1060d000004980068047100ae041b007b040effe50433
0066038d006a033300690458fffb0460007b045e0000024600b204370048
03e70016045e00b503db000b033d0064043f006904d1000d0442008d0493
00640373006903d3000c0454000005b2006805c7006803e3fff605c10045
0602006404980068038d006a0458fffb024600b2024600240246ffd2043f
006904540000045400000454000006020064045dfffe0471006803b90068
0431001e0417006803db005004e300680483006902610068047600680445
fffe05bb006504c4006403fc00610483006904c400680433006803e1002d
043900390433fffa0556005b041b00160599002804de003f045dfffe0417
006804e300680261006802610034048300690433fffa0433fffa04de003f
024700c00000fe7e0247ffd20000fd9001f4009601f4009601f40096021c
0049019000460190002a04fc000604cb007904e4007904460079053d0025
049a00790762002504580071058900790589007905330079056c00240686
0075057e0079053a007705650079048b00790480007704be004204cd0025
063b0068049200150560007b0502002f076a0079076a007905db004206cd
007904c700790496006f075e0079050c000e044600790404007905e90042
048f007703f80070049a0079049a007902980079029800400274001d0589
007905330079077b0024077500790606004204cd00250556007b05c60042
053a0077054a002003e800500454007f042f006a0393006a0477002503e7
006805b6001203aa005004b8006a04b8006a0452006a0479002505620068
04b6006a043f00690489006a04730049038700690417003904080014057b
006803de0017048f006a043f00290668006a0668006a04f0003905fc006a
041d006a03c300500623006a043f00170393006a0356006a044e003303c3
00680370005e03e7006803e7006802390053023900200221000504b8006a
0452006a061b00250662006a046a0034040800140489006a04fa0039043a
00690471001e043b0069045dfffe045500680471006803d2006804960024
0417006806b6003603e6005d04e7006804e70068049d006804c0002405bb
006504e300680483006904c400680433006803ef006904390039041a0028
055a005c041b001604cb006a0476002a06c1006806c1006805320039064c
00680449006803fb005d068300680490001803d2006803a4006805530039
03ed005b03a4005e04170068041700680261006802610034023b000704e7
0068049d00680687002406be0068055e0039041a002804c4006a05360039
0483006904b3001e0247ffdd0247ffda0000fd9b0000fd98046e009d05b3
007d028800f703ec003f02f7000001e50091032500910715008907150089
06ce006e06ce006e056f002606d70064045a007c05070023043600230507
0023046e0023040c007004360085040c0070046e00a203870069043a0043
0436003f043a0043046e0061047cff9804e0004f0436002604e0003d046e
00330356006e036c0078084f007504f4006e0436007b02bf002b03ae0031
03b000330436003c03b700570438008103ae00480436006e043800640436
007b043600b10436006f043600810436003c043600a70436007e0436008e
0436006e04360067046e008102e5002c03e0002903e3003f0464004803ea
005c045a007803da0048046e006f0459005a046e0081046e00b2046e0081
046e0090046e004d046e0096046e0082046e0094046e006f046e00640342
00690342007e03420063034200730342003a03420086034200670342007c
034200630342005603420066034200680342006602560092025600320342
00690342007e03420063034200730342003a03420086034200670342007c
034200630342005603420066034200680342006602560092025600320342
00690342007e03420063034200730342003a03420086034200670342007c
0342006303420056046e004f06ec007e071e007e06ec0070071e00690a1b
0069046e007c046e007f046e007c046e00a801fa008e046e007f00eafe72
046e007c046e007c046e0042046e007c046e007c046e007c046e007c046e
0071030100540425002706ce006e045c0054036700460541002304c40033
056f003f045a00b5067f005b05ab001a04500099036b005c034200690342
007e03420063034200730342003a03420086034200670342007c03420063
03420056026c004f03b000150395005d0351006403d9005d035b005d0314
005d039b006403f6005d01ef005d01e7002503af005d031a005d04af005d
03f2005d03d500640357005d03d500640399005d02fa0062035c002c03d4
005303940021055b001e03660023036400230322004c03b000150395005d
0351006403d9005d035b005d0314005d039b006403f6005d01ef005d01e7
002503af005d031a005d04af005d03f2005d03d500640357005d03d50064
0399005d02fa0062035c002c03d4005303940021055b001e036600230364
00230322004c02ef004c0346003802ab005d034e005d02ee005d01eb004b
02f700410349004101c2004e01b400150319004001b9004004db004e0353
004e032c005d035000470346005c0284004e029b0056021c002e034b0047
031300270497002f02e800240313002702bf004d03b000150395005d0311
005d03890036035b005d0322004c03f6005d03d5006401ef005d03af005d
039a001604af005d03f2005d0355005a03d5006403e4005d0357005d0334
002c035c002c0389000f0478005503660023049400380400003f0382005c
03520090033000190321005b02ae005e026e00240353000f0341006a01ef
0090033e0047031e00210352009002e4001c02860024032c005d038f0016
032a00760372005a029a005d02b300160338000f041f005d02f9000f0436
00440448005a03b000150395005d0311005d03890036035b005d0322004c
03f6005d03d5006401ef005d03af005d039a001604af005d03f2005d0355
005a03d5006403e4005d0357005d0334002c035c002c0389000f04780055
03660023049400380400003f0382005c03520090033000190321005b02ae
005e026e00240353000f0341006a01ef0090033e0047031e002103520090
02e4001c02860024032c005d038f0016032a00760372005a029a005d02b3
00160338000f041f005d02f9000f043600440448005a046e006803180060
022900b302290032034d006b034d006b04f60061034d006b034d006b034d
006b0328005203280071032800240328003a0328002d0328003703280066
032800590328003b03280060022900b302290032034d006b034d006b04f6
0061034d006b034d006b034d006b0328005203280071032800240328003a
0328002d0328003703280066032800590328003b032800600000fd6f0000
fe2c0000fe980000fe130000fd730000fd8c0000fdb40000fe740000fe45
0000fe290000fe1d0000fdfe0000fe250000fdfb0085fecd0000fe3b0000
fdd10000fdd10000fdea0000fdf30000fd620000fe8c0000fe850000fde4
0000fdff0000fe980000fddb0000fda40000fdc40000fdc30000fdb40000
fdb40000fd980000fdd90000fd1b0000fd1b0000fd7f0000fdb30000fcc2
0000fd9f0000fd650000fe5f0000fdda0000fe230000fd880000fdfa0000
fe590000fd1b0000fde60000fe600000fd710000fe740000fea00000fddb
0000fdf90000fe120000fdfb0000fd8a0000fd8c0000fd9d0000fd560000
fde4000000000000fe3b0000fe3b0000fd8b0000fdfa0000fe3b0000fe3b
0000fd5f0000fe5f0000fdb80000fdd90000fdd90000fda20000fdb80000
fdd90000fe0d0000fe1b0000fe860000fe0b0000fdf20000fe230000fdf4
0000fdfe0000fd730000fe540000fe390000fdec0000fdf6044f007b0477
000904dcfff105a70067065f000d04590049053a0077043f0069043d0074
036f0064044b00790376009b03c7004d037500460472002204600022048f
000d043d00890380006902210005053a007703a8006903a8004104000000
08000000046e000001a40000015500000072000000000000045a005a045a
005a043b00f70211006c0371006c04db006c041f00b702f2000004d50077
073c0054052d005a048c008d0491006f070700540516004b058a00140670
007904b5007f0542001506af004705c2007506ce006e063a002805880079
061d00770613003905f5007904d2005e03a30047056f003e0555ffd90243
ffe90509007904fc0006053b007203e30055044b003b0527005f04c60093
045a00220356002c03cf002b032e006c074c00690539000f049b0079065c
007905db001a04cf009403d3002803d30028047c001f06760039058d0069
04e6008c0349005c0362ff560568008c0586000b06b4007303bf005106b4
007303bf0050075e007303bf005005380087053800600538006005380087
06b4007306b400730715007307150061077c007303e60064077c007303e6
006406eb007306eb007306fa007303bf005106fa00b003bf005003e70064
0696007306960088072100730721006909870073079a007304a200660487
0073048700d404870073048700d405140073048600740679006d0679007d
0551005a073b00bc0641007c0641004d06b4007306b40073037701360376
005006b4007306b40073037701360377005106b4007a0645006206b4007a
06b4007a0663008406b4007a0663008406b4007a06b4007a0701007308a2
00730701007a06ed007304b0005a06ed003304b0005a0848007304b0005a
05d9008705d9005505d9005505d90087071d0073071d00b907d6007307d6
007303e6006403e60064070e007303bf0051070e007303bf005106e600b0
06e6007306e1007f04bf006306e100a504bf006304bf006304e0007404e0
007404e0007404e0007404f6007f071700b3062e00aa062e006004e00074
079000730645006206e4008406b4007306b40073079a0073071800730718
007307fe007307210073072100730893007305070031042d007704b20089
04d500890506007a04c4004d04fc0091051f0091046e008c04fc009304fc
0093046e009306400118067f005a05fa009505fa0095046e004d03dd0087
038c00850516002305160023059f006e058700de0544005205440052056b
0075025800de02ff003903b600de045a003904b8003404b80036057300a0
057300a004b10063076300630a15006304cf006e0799006e0a49006e0511
006e050e006e0533006e0496009a0496009a027000b804be00ae05c8007b
077b00950636009505e2009505b3007d05e300950675006e057f004202ed
00c805b2007e05fa009505fa009505fa009505fa009505fa009505fa0095
05e3009505fa009505e3009505fa009505f9009505fa009505fa009505fa
009505fa009505fa009505fa0095077b0095077b009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009506b6009505fa009505fa
009505fa009505fa009505fa009505fa009505fa009505fa009505fa0095
072000950720009503d500b405fa009505fa009505fa009505fa009505fa
009505fa009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505dd009505dd009505dd009505dd009505e4009505e4009505dd
009505dd009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009504db009504db009504db009505fa
009505fa009505fa009505fa009505b900de05b900de07f600a207f600a2
07f600a207f600a207f600a207f600a207f600a207f600a207f600a207d0
00c807d000c807d000c807d000c8056400de054b007c054e007c03b80052
054e007c03b80052042800de042800de05c200de060700de071e00de073d
00de05c200de05c200de068300de073d00de046e005f046e009705c8007c
05c8008c05c8006b05c8006b0835008508350085073e007c05c8007c033c
006d04b8005204b8005004b80052058700de059a00590552003405520036
062b00de062b00de039a0082024200ad042700500496007506a300de0609
00de0609007a05b900b405b900b405c8007c04b8003604b8003605bb0089
05bb0090061500c8061500c8057d00c8052f009505fe009505fe009509eb
009509eb0095060200950602009505fe009505fe009505de009505dd0095
05dd009505dd009505fa009505fa009505fa009505fa009505fa009505fa
009505e4009505e4009505ea009505ea009505fb0095060b0095027c00c4
06da009504f200a004f200a005dd006d04fe00a60470008c04fe009104fe
00910470008c04fe009104fe009105dd009504fe00950470009505110095
0470009505d8008c02cd00e402cd002b02cd00e402cd002b02e0007d02e0
006a09d3047209d300e7061100ec061100ec061100ec0611001e0611044f
0611001e02cd004e02cd004e02cd004e02cd002502cd01ad02cd0025057a
0254057a00a9057a0254057a0254057a0025057a0254057a002509d30472
0434000005c600d305c600d30be700850be7003504ed000004ed000005ca
006e05250019038500e40385002b02e0007d02e0006a06f6006c06f6006c
06f6006c059100b405db00be0648008c043f0064056e00160554006f04b4
007605c1006f04bd006f0487006f054a007605e4006f02ea006f02d80032
0592006f0486006f06e3006c058d006c05ae00790507006f05ae00790572
006f04390063053b00510587005b052c001f07ca002504f3001504ef001b
04a6005f0466004b04d9003d03de006a04e5006f045d006a0356004d0451
003d04e4004902a200580289001d04df004902950049073d005804f20058
04ac006a04e5004b04d9006f03cf005803ca0060030a003404e5004f0453
001d06770025043400100453001d03f300510511fff30540003904c60087
058a003904ff003904e30039050a008705d3003903080039030eff480596
00390441003906cf003705dc00370569008704f600390569008705190039
043c000f04c30046058300a60501005f079900690529ffeb04d2006804bd
000a047500690450005c03ae006904a3006903f800690466fff104e5001e
0470005c0289008c02e0ff60046a005c0287008a06b50018049700180443
006e04760018044f006903ce001703b200320328007504970018045a0046
05e900370442001e047a000703de0019039e001003ae002e033d005f03e1
002e036d002e035f002e038d005f0411002e021c002e02a5000f03e6002e
02f5002e04c3002e0419002e03c8005f0386002e03c8005f038f002e0306
00290353002803f90093038c00370550003703d1001d0365003703610028
034b005a03230053029e005a0352005a02cc005a0319000e0360000f0344
005201d500730263000f0322005301da007104e90023037200230312005a
035400280323005a02c50023026a001e024e00640372001e02c400270444
002703170014035b001a02bd0014039e001003ae002e033d005f03e1002e
036d002e035f002e038d005f0411002e021c002e02a5000f03e6002e02f5
002e04c3002e0419002e03c8005f0386002e03c8005f038f002e03060029
0353002803f90093038c00370550003703d1001d0365003703610028034b
005a03230053029e005a0352005a02cc005a0319000e0360000f03440052
01d500730263000f0322005301da007104e90023037200230312005a0354
00280323005a02c50023026a001e024e00640372001e02c4002704440027
03170014035b001a02bd00140511fff30540003904dd003904e7000f04ff
003904bd000a05d300390571008703080039059600390501000f06cf0037
05dc003704d2001e0569008705ba003904f600390571008704db000f04c3
004604fc003205d9005a0529ffeb0619006d056e000e04e700b104cc0069
04d9000f0434000f044d006403a4005a03cc005a04320018048000730214
00570454005c0424000f0463000f0412000e03db004b0443006e04be0023
0484000f04ae005a0375005a03ab0023040c0018056b005f04a6ffd205a1
001805ce005f0473006e03b9006904b1000f049d000a0577006304490065
06640023039e001003ae002e0359002e036a000f036d002e036100280411
002e03c8005f021c002e03e6002e038c001004c3002e0419002e03930034
03c8005f0411002e0386002e03c8005f0359000f03530028039f00320446
005303d1001d0477005f0400002a035f0055037a005a03a4005303240010
031d005a02a2005502c60053033c0023035a006e01c90067032000530311
001a03880053030c000f02da00500312005a03780025036f0050036a005a
028e005502a5001b0311001e03f6005503940014042e001e0443005a033d
005502b7005a0399001e037500200407005a032b006904970025039e0010
03ae002e0359002e036a000f036d002e036100280411002e03c8005f021c
002e03e6002e038c001004c3002e0419002e0393003403c8005f0411002e
0386002e03c8005f0359000f03530028039f00320446005303d1001d0477
005f0400002a035f0055037a005a03a4005303240010031d005a02a20055
02c60053033c0023035a006e01c90067032000530311001a03880053030c
000f02da00500312005a03780025036f0050036a005a028e005502a5001b
0311001e03f6005503940014042e001e0443005a033d005502b7005a0399
001e037500200407005a032b006904970025054bfff305c9003905050087
06010039053f0039051c0039055f0087064e0039037c0039035fff480623
003904870039074e00370614003705dc0087057f003905dc008705930039
048a000f04fd004605d000a60531005f07de0069058affeb05140068050f
000a04f8006904db005c040a006905260069046500690482fff1056a001e
050e005c02f8008c031dff6004e5005c02f6008a076b0018052d0018049d
006e04f7001804d60069044b001704040032035b0075052a001804cd0021
064e0037049d001e04c8000704220019054bfff305c90039051500390569
000f053f0039050f000a064e003905e60087037c0039062300390531000f
074e00370614003704f0001e05dc0087064e0039057f003905e600870517
000f04fd0046055c00320697005a058affeb06b4006d05de000e056900b1
055f0069056b000f04d3000f04a40064041f005a0423005a04d0001804fe
007302aa006704de005c0482000f0516000f0489000e0421004b049d006e
057c002304f8000f050b005a03d6005a0414002304920018060d005f0541
ffd2063800180666005f04dd006e03f90069053f000f04fc000a061c0063
04b4006506fa002307230025056e001e04d0005a05e0001e048a00500596
0000049900000777000003a3000004f2000a06f6000004b9000008d40000
07bd0000054c006405d200000535002e05e6000004970025055e000d0625
000c05720000086b00000693000005e7000c058000000526004b05eb0000
03d6004a0546004b0491002305df000003b4000003d6fff605ae00000840
000005fa000005b5000e04f9004b05dd0000044e0000045b001505ed0000
05ec00000817000004cc000505d70000047500180787002505e4001e0534
005a066b001e04dc004e05fa0000051e0014080d0000042900000560000a
0760000005160000098200000818000005cf00690660000005ad002e0699
000004c7002505d0000d06a1000c05a8000008ae000006fa0000066d000c
05b6000c0550004b06110000040f004a0570004b043a005504e100230558
00360605fffb03d200000437000505cf0000047c001b0868000006220000
0563006206070015055b004b05fa0000047f0000046e0022060e0000060e
000008550000052b00050614000004cd001805bd003c063000390661003e
0549007d054b004206090072052d001305b4001404e400100801003c0628
003c06700026062300350683002605fb006405b40047056f003206190035
07c600350510000f05c6003203e8007303fa002c02ee006e03e700500334
006e027200270400006e04070032022c0034022b000502b1002b02290039
064a0000043dfffb03d80050041c002603f9006e02f2001903590036027a
00200449001a03dd002a060f00320354000d0416002b0300003d059a0006
05db0079064700780519007904e5007905d8007303630079033f0009061e
007904d2007907440075061d007704ab0071056c004205a0005a05620016
083b0016057100150546001204c1005005280030042800690538006904b0
0068038f004f048e004b055b003f02fc005302e4fffc0526003f02ef003f
07af00530568005304ee0069053b004a0528006803f7005303d9005e035a
0025055b00490486000f06e7001d049e001704870010044b00500677003c
065d003905cf00640688003c05cf00640579004b0662006405f90010055c
001e056b001e0628001e052a001e086d0044068b003c06a700260658003c
06cd00260680004105fb006405f4004605dc0032065c0035089300350582
000f0633003c05a700140466007304570037033a006e04450052038d006e
02b700270462006e0458003802990017029b000f02ef00280297003f06e0
000a04ea000a044000580485001e045a006e037600140394003202ab0028
04d8001e048a00140681001403fb0009048b0014034900380491000d04b7
00cc04230076052f00cc040000cc03dd00cc04cf0079053a00cc024900cc
0249ffe0049a00cc03d300cc065800cc057300cc053a0079045f00cc053a
0079049200cc03c90054041a0028051900b9047a0016075d001a04410005
044f00170414004b03ed004b046800ac0377006d0468006d0402006d02ba
003904030046043c00ac01ff00a301ffffca03ce00ac01ff00ac066d00ac
043c00ac0447006d046800ac0468006d030a00ac0348004f02bf001e043c
00a403b700170610001903a6000a03b7ffdf038000460527000d052000b9
0459006b058f00b9043200b9040d00b90536006b058c00b9029600b90296
ffe3050400b9040100b906cd00b905c600b9058c006b04cb00b9058c006b
050800b90417005204560028057100aa04f6001607d8001b04b9000504c0
0017044600460459004b04c3009f03ac006004c30060045b006003090037
0475004b049e009f0254009f0254ffc90457009f0254009f06dc009f049e
009f049d006004c3009f04c300600359009f037a004302fb0028049e0097
04160017067b001c0414000a0416ffdb03ac00410509000004db00400499
006e054c0040048400600464004004c3006e054e0040025d004002a6ff60
05460040034e0041066c0040058700400558006e04b9004a0558006e04a4
00400409000e04190021052a00780501009607e500a00585000f0459001e
04bf000f0429004b0476004003c0006404d00064041f0064037f004304aa
fff1043c00400259004002afff60045a0040025d0040066d0040043c0040
045b006404a4000f04720064036a00400348fff9032b007d043c00760414
007306700078047100000471ff6003e4000f059a0000055b004004dc006e
05cf004004bf0060049d0040052c006e05c6004002d000400301ff6005c3
0040039b0041070700400600004005bf006e0538004a05bf006e05330040
0455000e046300210596007805780096085a00a005f3000f04ca001e04fb
000f049b004b04e600400405006405410064047c006403cc0043051afff1
04b5004002c600400303ff6004dc004002cc004006f3004004b5004004c4
00640514000f04e3006403ce0040037cfff9035f007d04b5007604750073
06d5007804df000004d1ff600424000f056e00160554006f0487006f052d
003204bd006f04a6005f05e4006f05c3007902ea006f0592006f054a0016
06e3006c058d006c049a007205ae007905da006f0507006f05ae007904a0
0030053b00510544000006ca007404f3001506bc002c05e30046052d0042
051b006a04e300ad0485ffe704a500660403006a039b00680501fffc04c5
007602d500a804e000540487002604fa00b50435000b039f006404ac006a
053f000b04b5008c03cd006904f700640407000b049bffe3062100640461
ffe706850052066f006404b1006403e30069050c00060495000d06350064
04a6006e06f2000b04c9007704c900a404c9007204c9008504c9003a04c9
00a304c9007404c9008404c9006604c90063055b008103b3002c04720029
047f003a04f60048047d00630515006e04430048052d006f0515005a046e
0081046e0091046e006c046e0069046e0051046e00a7046e0083046e006b
046e0067046e005b04e6008104e600b704e6007904e6008804e6005b04e6
00bc04e6008304e6008804e6006c04e6007304cd00b004cd00bc04cd009a
04cd00ad04cd005d04cd00c504cd00a904cd009204cd009604cd00880466
00280221000502840049026b000e01c2004e01b4001501c2004e01b40015
0289008c02e0ff60021d008701b1ff75021d008701b1ff7502f8008c031d
ff6003b4000003d6fff603d2000004370005022c0034022b000502990017
029b000f02fc005302e4fffc01ff00ac01ffffca0254009f0254ffc90259
004002afff6002c600400303ff6003080042029a004d03340011036e003c
040700580335006d045b001404a1009004a100b704a1008804a1009d04a1
005104a100af04a1008d04a100a604a100810469006d05d200a905d200a9
05d200a9036600af0366002205a4007205a40072059700140574008a0509
008e05e2008a051f008a04bc008a057b008e0613008a02ea008a02d4002d
059d008a04c0008a07310088060b008805d6008e0515008a05d6008e0583
008a047c008a0532004705d00072056e0027083000250526002705210027
04ca0070046b006704f000470402008205010082046b008202d400670478
005704f900570298006b027f001404b40055028900550769006b0507006b
04ca00820503006104f0008203c6006b03e900780321003a04fb0061049b
002906f5003604610029049b002b04210069059700140574008a04b8008a
055c0047051f008a04ca00700613008a05d6008e02ea008a059d008a0574
001707310088060b00880517008405d6008e05f6008a0515008a04e3003c
053200470566000606e600820526002706fb004906130055053e00820505
00d104b6000804bc00800408008403a5008204f9000a04eb009702c300d3
04d7005f0495002704fb00d3045d001d03bf008204ca00820568001904ca
00ac0530007e03eb00820430001904df000c064f00820471000c066a005d
069a007e04df008003da00820494000d048f000d05fc0082043d00740689
000d04ac0086033701090337004005e5008405e50084076400ac05d200a9
04ff009a04ff009a054c0008056d004204da008b05ba0042051d00420502
0042053b008d060300420320004203db000005c3004204600042070a0040
060c00400595008b052c00420595008b05420042046c002904ea004205c9
00c50537005807d8005c0581000d04ff005c04f3002504ff008004ca0074
040a0080051d00800457008004cd000d0548001b04f9007402ce00a603c1
001904d7007402d200a4077b00290532002904b600820509002d04ca0080
043c002903df00310386008e0532002504860032068c003c04ba00210511
0019043c001d0593000805b6004204fb0042050d00130562004205360025
0654004205510084034a0042061100420537001307690040065e00400527
003905e0008b05f700420599008b0572004204fb0013052c004205420040
0631006c0581000d0676007f05c500290504009605530080057d004f04be
001404c6007e04080074043c007204d1002905110097028b008204ca0074
04a8001d052c004f049900140455006904b60082054800310526004d0536
007a03e10074040e0027049b0025060900760558fffc06560025067d007c
04f2007e04260080056000210538001f061d007c04cf008a070e00310298
006b027f001402ce00a603c1001904c2009904c200b804c2009004c200a8
04c2005504c200c404c2009604c200b504c2009004c2007d05fa00a905fa
00a905fa00a9037600af03760032061a0087061a0087060d002205e00099
057100a40650009905810099050d009905ea00a406800099032c0099031f
003d060b00990517009907af009906790099064900a4057b0099064900a4
05e7009904e200a1058300480648008805df003608c90031059300390590
00390524007d04d0007d055f005c04610099056c009904ce00990326007b
04dd006b0564006b02e2008002cb00220515006902d4006907f700800574
008005340099056f0074055f0097042100800446008d0376004b05670074
050b00400788004d04c5003b050b00400481007e060d002205e000990508
009905cd0059058100990524007d06800099064900a4032c0099060b0099
05e9002407af00990679009905770094064900a406620099057b00990541
00480583004805cd00190755008b059300390783005c0690006705c10097
057300ec053b0029052200950465009a03fc009905740019055700ae032c
00ec05520074051d0036057300ec04be002e042400990534009905d70024
053100c205a7009404450099046e00240548001906c3009904e0001906e9
00700706009404df006e03da007004b4000b048f0008061a008204610074
06a1000f0513009d038b0126038b005205e5008405e500840824009f05fa
00a9056a00b0056a00b005ef001a0609004b0550009c065d004b059f004b
0588004b05d3009c06ac004b0376004b045700190665004b04da004b07d0
004b06b9004b0634009c05c8004b0634009c05d7004b04f6004305740042
068400f105d2005a08b7005a064300300592005a058b0042056700940525
0088044b009405730094049700940515001705890019055c0087030100bd
03ea001905240088030a00b9080e003905a70039050a0094057600420525
0094048b003903f6003103c800a405a700310499002e0700004005120021
0581002b047e002105ef001a0609004b057e004b059a0019059f004b058b
004206ac004b0634009c0376004b0665004b05d2001a07d0004b06b9004b
05dd00550634009c06ac004b05c8004b0634009c057e00190574004205f1
005207030088064300300753009c069000450588008b05b4009405f90088
0527001a051c00940452008b048d0088054e0039058000b402ee00a90520
00880508002b05cb00880500001904ae0083050a009405b1003d05a20083
059a00940431008b0457002c050800310680008b05df002106db003106fe
00940550008b0474009405e7003105ac0034069b0094053300ac0788003d
02e2008002cb0022030100bd03ea00190371000004890000078f00000371
000004890000078f00000371000004890000078f00000371000004890000
078f000002f2000002f2000005000334052503ab044f0000044f000002f2
00000000fccb0000fcc80000fcc80423000005c500000000f7ca0000f7c9
0000f43404f600000000fc910000fcb10423000004ed0000065a000005fa
009505fa009505fa009505b700b4024200ae05fa0095041d003205fa0095
05fa009505e3009505fe009505fe009505fe009505fe009505fa00950645
006c0498007d0499006a04690032066f0032087a00320a8500320319005f
0319004b032c004b052a006e0319003c0319003c032c003c052a004602d9
00e4030800e4033100e4035f00e402d9002d0308002d0331002d035f002d
039800b403f400aa04e000a005de00960398004103f4004104e0004105de
004103c000e403e400e4040e00e4043f00e403c0002d03e4002d040e002d
043f002d02e0007d02e0007d0315007d035c007d02e0006a02e000350315
0035035c003502d900e4030800e4033100e4035f00e402d9002d0308002d
0331002d035f002d02d900e4030800e4035f00e4035f00e402d9002d0308
002d0331002d035f002d02cd00e402d900e4030800e4033100e4035f00e4
02cd002b02d9002d0308002d0331002d035f002d02cd004e02cd004e02cd
004e02cd004e02cd002502cd002d02cd01ad02cd002505f100230452001f
06010023061e00230624002305fe002306a9002206c70022077100220822
00220bcc002204c1006906740069084600690a6e0069079c006909a20069
0c4300690a7700690cd000691040006904db006f0674006908460069079c
006909a200690c4300690a7200690cd00069104000690516006906740069
096e01910516006906740069084600690516006906740069084600690913
01b50a9b001a10a600ad17310096081400690c12006911310069175a0069
033f000004890000078f00000e7300000321000004710000078900000e6d
0000033f000004890000078f00000e730000033f00000471000007890000
0e6d0000032100000489ffff078900000e6f000003210000048900000789
00000e6f00000321000004700000079000000e7400000321000004700000
079000000e7400000321000004700000079000000e740000032100000470
0000079000000e74000004f0000007f700000bbc00000ddd000011110000
04f0000007f700000bbc00000ddd00001111000007f300000bb800000dd9
0000110d000007f300000bb800000dd90000110d000004f0000007f30000
0bb800000dd90000110d000004f0000007f300000bb800000dd90000110d
000004ed000007f300000bb800000dd90000110d00000498007d04cd007d
0502007d0498006a04cd006a0502006a0357005f0357005f03b1005f03fa
005f034300730357008703b1008703fa0087028800f7029500f702a700f7
043b00f7046600f704a000f707db005a07db005a079f005a079f007309f8
0073096f0073096f0073096f0073096f0073096f0073096f0073096f0073
096f0073096f0073096f0073096f0073077c0073077c007306ed007306ed
007a08480073077c007306ed007306ed007a03d2005a03d2005a05bd005a
05bd005a070e0073070e0073070e0073070e00730858007306b4007303be
005003be005006eb007306eb007308580073085800730858007306eb0073
06eb007306eb007306eb0073070e0073070e0073070e0073070e007305f8
008705f8008705340087053400870534008705340087063c008705ea0087
063c008705ea0087059500870595008705ea008705ea008705ea008705ea
0087063c0087063c008706c6007306f6007306f600730482007304820073
03430078034300780677006d0677007d0677007d0677006d053e004b053e
007d061a007d061a007d06b4007a06b4007a06b4007a06b4007306b40073
06b40073075e007303e6006406b4007306b4007303f4005103f4005106b4
00730377013606b400730376005006e600b006e600730377000003770000
06e600b006e60073037700510377005106fa007306fa00b00377000a0377
000a06fa007306fa00af037700510377005106b4007a05b6005006b4007a
05b6005006b4007a06b4007a06b4007a06b4007a06b4007a06b4007a06b4
007a06b4007a05b6005005b6005006b4007a06b4007306b4007306b40073
06b4007306b4007305c800730858007305c8007c061e0089075e0073061e
0073047300880473007304c8005004c800500a8700ad110600c30a8700ad
110600c30a8700ad110600c3082e00f00c6300fa082c00f00c6300fa05db
00be076d00be076d00be07ca003c0a11003c07ca003c0a11003c09d900be
05ab001a091301b510a600ad05ab001a091301b510a600ad0cc700630d52
0069143d006904b1006304c100690846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006904b1006304c100690846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006906960073069600730846006904b1006304c1006908460069
04b1006304c100690846006904b1006304c100690846006904b1006304c1
00690846006904b1006304c100690846006905d1000005d1000005d10000
05f2005804b80034057300a005b6004605b600de08290064082900a00932
00640616007c0616007c09c8009509640095073e0085073e008f073e007c
0370007804500099056e0078061d0064061d007806be006406be00820514
00de037400aa02f800960341005f03410064038d00b4038d0064034100a0
034100c803110064031100c802cd00e402cd002b02cd00e402cd002b02cd
00e402cd002b02f9007d02f9008205fe009505fe009505fe009505feffff
031a00e4031a0078024600b4025300820544004605b600de05b600de0562
005205580059056b00690562007805440046054400460544005205440046
05a7005005a700500544005205440046054400520544004605c5000505c5
002005c5000505c5002007f600a207f600a207f600a207f600a207f600a2
08c8007807f600a207f600a207f600a207f600a207f600a207f600a207f6
00a207f600a207f600a207f600a207f600a207f600a2095700a2095700a2
05970082059700820597008205970082059700820816008205ca009605ca
009605ca009605ca004605c60082068b0064068b0082064c00a0064c00a0
064c00a0064c00a0064c00a00461006404610064025d00aa025d00aa0389
00aa038900aa06ce006e06ce006e06ce006b09bf00850597008205c8006c
05fa009505fa009505fa009505fa009505fa0093046c009605ca009605ca
0096062b00780450009906b2009606b20096051700960517009605170060
05170060051700840517008406b400a0041d0032041d0032041d0032066f
0032066f003205fa009505fa009505fa009505fa009505eb00b4084c00a0
0514006402e0004607a200950377013605fa009505fa009505fa009505fa
009505fa0095063b009505fa009505fa009505fa009505fa009505fa0095
07f600a207f601cd05b7011905b700b405b7009705b700b005b700aa07f6
00a207f6020807f600a207f600a207f600a207d0001e07d0001e07d0001e
05fa009505fa00950266004605eb0078057300a0057300a0057300750573
0075057300a0057300a0048d00a0048d00a004c800a004c800a0072c0096
072c009605af003c05af003c05db00be05db00be05af003c04b8003404b8
003604b8003404b800340614003406140034052000be0520001404b80035
04b8003304b8003304b8003404b8003404b8003404b8001704b8001705fa
009504b8001704b8fffa05ee006405ee00a005fa009505fa009505fa0095
05fa009505e2009505e2009505fa009505fa009505fa009505e3009505fa
009505fa009505fa009505fa009508ac00a009b200950d06009505fa0095
05fa009505fa009505fa007905fa009505fa009105fa009505fa009105fa
009505fa009105fa009505fa009105fa009505fa009105fa009505fa0091
05fa009505fa009105fa009505fa009105fa009505fa009505fa009505fa
0095060200950602009505fa009505fa009505fa009505fa009505fe0095
05fe009505fe009505fe009505fa009505fa009505fe009505fe009505fa
009505fa009505fa009505fa009505fe009505fe009509820095078e0095
0b2c009505fa009505fa007305fa009505fa007305fa009505fa009105fa
009505fa009105fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009105fa009505fa00910961
00950961009505fa009505fa009505fa009505fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa009505fa009505fa009505fa
009505fa009505fa0095096800820968008205fa009505fa009505fa0095
05fa009505fa009505fa009505fa009505fa00950b2e00950b2e00950573
00a0057d00c8057d00aa057300a0057300a003bb007c054e007c054e007c
054e007c05c200de0607009505c20095073d0095060700de054e007c054e
007c054e007c054e007c054e007c05fa009505fa009502ff003903700078
037000780370007804e6009504e60079051400de0612007c024600b407d7
009507d7009505fe009505fe009506ab0032051400de0564003203b600de
03b600de0449004c04de009507b300c8046e009d046e009d046e0090046e
009002db008c0a7507ea0a7500000a7507ea0a75000005fa009503b800a2
07aa007c07aa007c05c6007c049d000a03de005808c500bc08c500cf05fa
009505a6009b04fc009b05550000055502ab05550000055502ab07ac003c
07ac003c073400950734009509c300de07fb00de0a4e00de0428002403d1
0069057100de057100de06eb00c805ec006407fb00de04db00de07fb00de
07fb00de07fb00de07fb00de07fb00de07fb00de07fb00de07fb00de07fb
00de07fb00de07fb00de07fb00de07fb00de07fb00ac07fb00de07fb00de
07fb00de07fb00de07fb00de07fb017307fb00de07fb00de07fb00de07fb
00de07fb00de07fb00de07fb017307fb00de07fb00de07fb00de07fb00de
07fb00de04db00de069100bc07fb00d704db00d407fb00de07fb00de07fb
00de07fb00de07fb00de07fb00de069100be04db005504db00d407fb00de
07fb00de07fb00de05b3007d07fb00de04db00de069100be05b1007c05b1
007c04db00de07fb00de07fb00de071f007c071f007c024600b20442008d
060200640498003c03a80069024600270602006404980068055b0037077e
00bc079d0058078300da02f800fa05ec006407fb00de07fb00de07c1007c
064700de057800de0566007c06bf00950518007c056c00bc056c00bc056c
00bc0676007c064a005805fa005805440058054400580544005805440058
0544008305f1006907fb00de03c600de064f00de064f00de068600bc0686
00bc04070000040703ab04070000040700000407000004070000070c0358
070c0358070c0126070c0064070c0064070c00af070c0064070c0064070c
00b4070c0064070c0064070c0064070c0064070c0064070c006407fb00de
0637005007fb00de0527000d052000b9040100b9052d000c043200b90446
0046058c00b9058c006b029600b9050400b90527000d06cd00b905c600b9
04860062058c006b057d00b9058c006b04cb00b90462002f0456002804c0
00170632005f04b900050612005f05e3005f052d000c04fd006304e300ac
0425001404a5006603d50071039b00680501005704c5007602d500a804a9
009d047c002a049e009704350041039f0067049d00600522003204a80098
03cd006904f7006403c3004604c40023060d0064043bffd506380096066a
006404b1006403cf006004db0041048500210635006404a6006e06f20032
059a0000055b0040051300b90577002504bf006004fb000f05c6004005bf
006e02d0004005c30040059a000007070040060000400534006205bf006e
060d00b905bf006e0538004a050a002f0463002104ca001e0675006e05f3
000f0650006b065c0049052d01100577006d055c000f0493004d04c50064
04310064045f007704b7004004f000640264004004c1004004c6002a04ee
000f044500730458006d04c400640577006904f6000f042a007a0559006b
03e6006204d00054062e006404d1ff4706380069069d0064050400690446
006405170057056000210655006404ef0064074d004a04ce000504ce004a
04ce008004ce004a04ce004a04ce004a04ce008004ce004a04ce00f904ce
005e04ce004a04ce004a04ce001b04ce004a04ce005304ce009d04ce0053
04ce004a04ce00c004ce002b04ce003604ce000504cefffb04ce001f04ce
000504ce009f04ce00a604ce005504ce00c304ce008d04ce00b104ce00d4
04ce009004ce005704ce00cd04ce00a604ce008704ce00e104ce003404ce
005604ce008e04ce005504ce009004ce00b004ce00c104ce008c04ce005a
04ce003104cefff904ce004704ce003104ce00ab0454003f02cd00e402cd
002b0b2300be0b2300be1132005a1132005a0f0900a1053f008205ca0096
057700820494005d04ce005e0270000006b10000075d000006b1000005dc
000005dc000005dc000006b10000075d000006b1000005dc000005dc0000
05dc000003bf019904b0014002da0095036900b204a50095058600b2066d
009507a300b2082b009509bf00b2075a00aa0539000005390264056e0000
056e0000039200e40392004206c200aa06c200aa06c200aa0539025904b0
00c904b000c904b000c908c8011b052503ab032100000321008803370000
033700b004340000033700b00337000001c9000002c1000002c100000304
000003040000073f00aa01b6000001b70000025a0000025a000002960000
02c40000022e00000270000001c5000002cf0000081400690c1200691131
0069175a0069074c00370b7b003c074c00370b7b003c076d00be0b2300be
076d00be0b2300be025800000641007306410000067300730673000004ae
007a04ae000004ae007a04ae000000f700000000fe700000fd9f04910000
065e0000035200b4035200260319005f0319003c02cd00e402cd002b03ec
00b003ec004202ec00e302ec002d036400610364003e049700a804970042
031200e30312002d03fc006503fc00410574009d05740041034400e30344
002d04c2006b04c2004502ec00e402ec002d02ec00e402ec002d02ec00e4
02ec002d03d200e403d2002d029100f70521015b031200e40312002d0312
00e40312002d031200e40312002d03f600e403f6002d02a200f704cc00f7
034400e40344002d034400e40344002d034400e40344002d042600e40426
002d02b900f7050e00f702c500f7054e00f70000ff400000ff360000ff49
0000fe3c0000fe400000fdd40000fdc20000fcfb0000fcb40000fdd40000
fdc20000fdad0000fdb00000fdb40000fdaa0000fdb40000fdaa0000fdb4
0000fdaa0000fdad0000fdaa0000fe8504fc000604fc000604fc000604fc
000604fc000604fc000604fc000604fc000604fc000604fc000604fc0006
04fc0006049a0079049a0079049a0079049a0079049a0034049a0079049a
0079049a00790298007902980079053a0077053a0077053a0077053a0070
053a0077053a0077053a007705ce007705ce007705ce007705ce007705ce
007705ce0077052f005a052f005a0609005a0609005a0609005a0609005a
0609005a0609005a04900012049000120490001203e8005003e8005003e8
005003e8000403e8005003e8005003e8005003e8005003e8005003e80050
03e8005003e8005003e7006803e7006803e7006803e7006803e7001e03e7
006803e7006803e700680239005302390053043f0069043f0069043f0069
043f003a043f0069043f0069043f006904cb006904cb006904cb006904cb
006904cb006904cb0069046b0049046b004904fc004904fc004904fc0049
04fc004904fc004904fc0049040800140408001404080014045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe
045dfffe045dfffe045dfffe041700680417006804170068041700680417
002704170068041700680417006802610068026100680483006904830069
048300690483005b04830069048300690483006905140069051400690514
00690514006905140069051400690493004704930047055f0047055f0047
055f0047055f0047055f0047055f0047041600160416001604160016046e
006804be004202b500250439003904ce00960544007905530079053f0079
0494006804a300680494006802390053026c004f0000fd6f0000fe980000
fe130000fd3d0000fd940000fdaa0000fe790000fe4d0000fe730000fdfb
0000fd770000fdb30000fcc20000fd970000fd650000fe180000fe630000
fd1b0000fddd0000fe300000fddb0000fd8a0000fd970000fda40000fe3b
0000fe3b0000fd940000fe5f0000ffb10000ffb10000fe140000fd550000
fe280000fe1e0000fdb50000fdae0000fdd90000fda20000fdb80000fe11
0000fe1e0000fe870000fe0e0000fdf50000fe260000fdf80000fe010000
fd7a0000fe550000fe3b0000fdf00000fdfa0000fdf60000fdf10000fdf6
0000fdf10000fe620000fdbc0000fdec0000fd830000fda00000fd830000
fda00000fd830000fda00000fd830000fda00000fd530000fd7d0000fd53
0000fd7d0000fe540000fe510000fe510000fd5f059d000a04cb007904c7
00610480006e04800077055100320604000a04cb005f04a40070053a0076
0458007a044bffaa04e3007704f200160286006702980029050900790757
00690572ffaa053a0077068b00770544000a04ab007903f8005504620030
04be002d04be0042052d0079052d005a04f70012044d005e044300710448
0064047b00650998007808ee007806c00079066d007907e6007507930075
04fc00060298001f053a0077052f005a052f005a052f005a052f005a052f
005a04fc000604fc000606ee000004ed007704e3007705090079053a0077
053a0077044300710998007808ee007804e3007707610079081a00790503
00670572007504fc000604fc0006049a0079049a00790298ffa702980014
053a0077053a007704f8007904f80079052f005a052f005a04580071057e
00790554007904aa007a044d005e04fc0006049a0079053a0077053a0077
053a0077053a00770490001204fc000604800077044b002904be004203fa
006004e4002c052f001c04d80006049a0079027400170546007704f80029
0490001204fc000604e4007904e4007904e4007904800077054b0078054b
0078054b0078054b0078054b0078049a0079049a0079049a0079049a0079
049a0079044b007904e30077057e0079057e0079057e0079057e0061057e
00790298000202980040050900790509007905090079044b0079044b0079
044b0079044b007906860075068600750686007505720075057200750572
007505720075053a0077053a0077053a0077053a0077048b0079048b0079
04f8007904f8007904f8007904f8007903f8007103f8007103f8007103f8
007103f8007104be004204be004204be004204be0042052f005a052f005a
052f005a052f005a052f005a04d4001604d40016075f0016075f00160492
00150492001504900012044d005e044d005e044d005e045500330455ffeb
048b002c04f800790582007905560079044d005e0480006e03d500790461
00240461003004700033043b00690470006904330064026cff9e026cff9e
06780040045700490432004f0278000b03e700160463005305760068045b
003b0371006602bf002502b500250519001403a3005103a7003203820041
03ab002308130069044d003f0698005303e8005002390000043f0069046b
0049046b0049046b0049046b0049046b004903ee005503e8005003e80050
0605005003f4000803f4003f0432003f043f0069043f006903a700410221
fff40813006903f4003f0477005303e8005003e8005003e7007a03e7007a
0239ff9a0239ffef043f0069043f0069034f0025034f0053046b0049046b
004903d40041046a0040058e0069041e006403a3005103e8005003e70068
043f0069043f0069043f0069043f00690408001403400035059c00530343
0025068b0069068b006903a500470370005e03a300510311002803e70038
026b000b027f001504600068035e0015040800140289ffd103eb0029035c
003b020600c0034400c00256000c022700aa03e800500461003004610030
0461003003870069047000690470006904700069047000690470006903e7
007a03e7007a03e7007a03e7007a03e70068026c004f026c004f03f4003f
046a0040046a0040046a0040046a0040046a00400239ffda0239ffda0239
00210432003f0432003f0432003f022c003f022c0000022c0013022cfffd
06a8005306a8005306a8005304770053047700530477005304770053043f
0069043f0069043f0069043f00690473004904730049034f0053034f0053
034f0053034f00530370005e0370005e0370005e0370005e0370005e02b5
002502b5002502b5002502b50025046b0049046b0049046b0049046b0049
046b004904080013040800130632001d0632001d03de001703de00170408
001403a3005103a3005103a30051046a004002b500250632001d04080014
03e80050023c004f026c004f0278000b03e8003302ddffcf047400400454
003f03a300510423fffc03b1005a03a2003c02ea006a05b20068051e0005
045500680449005a03ee005e03ef006904b2004405570005045500550421
00620487006903ed007d03d5ffa5044d0069047a0014026100680261001d
0476006806a7004e04c4ffcf0483006905c3006904e000050444006803ce
006903e1002d0439002b0439003904750064048c00470474001603db0050
03e6005d03e6007903f50058086c006a0926007805de00680686007906ff
006407ad0075045dfffe0261001304830069049300470493004704930047
0493004704930047045dfffe045dfffe045dfffe044d0069044d00690476
0068048300690483006903e6005d086c006a09260078044d0069071c0068
079e0079047c005504c40064045dfffe045dfffe04170068041700680261
ffaa026100030483006904830069046a0068046a00680493004704930047
03e6005d04e3006804a400680430006903db0050045dfffe041700680483
006904830069048300690483006904160016045dfffe03ef006903b7001d
043900390396004b047b0027049300100447fffe04170068023b0007049b
0069046a001d04160016021000c6034e00c7028c0027020b00a5045dfffe
04710068047100680471006803ef006904aa006a04aa006a04aa006a04aa
006a04aa006a041700680417006804170068041700680417006803d50068
044d006904e3006804e3006804e3006804e3004604e300680261ffe70261
003304760068047600680476006803b7006803b7006803b7006803b70068
05bb006505bb006505bb006504c4006404c4006404c4006404c400640483
00690483006904830069048300690433006804330068046a0068046a0068
046a0068046a006803a4005e03a4005e03a4005e03a4005e03a4005e0439
003904390039043900390439003904930047049300470493004704930047
04930047044700140447001406a4001d06a4001d041b0016041b00160416
001603db005003db005003db005004e300680439003906a4001d04160016
045dfffe03c1002703c1ffd20433001d046a006804e3006804a8006803db
005003ee005e03d5003003550068045c00ac03b1005a0470006904780069
04a8006903f8005f03b9006d045b006804a7006804080013027f0015027f
001502390053028cffdb069b00490477ffa3043a0069034f0053042b0061
0225ff870255ff8702b5002504b1000b04320069042700490408fffe03a7
0041023900530000fef50000ff370000fe7b0000feef0000fe1c0000ff07
0000fdf40000fdb50000fda70000fdbc0000fd850000fe520000fdc50000
fdad0000fd8c0000fdf50000fd5d0000fe520000fda10000fda10000fd71
0000fdd90000fdb40000fef50000fdda0000fda70000fdc50000fd8c0000
fdb50000fda70000fdb50000fd8c0000fdda0000fdda0000fdb50000fdb5
048000770480006e048000770480006e063a000004dcfff1064f007504aa
007904420000038000360380006903800036046d00b5046700b204830069
03ef006903ee005e03ef006903ee005e0433fffa0433fffa0433fffa03d5
006804840069034a004b05b1006503a6001c039f005a042b006804fc0006
05e9ffce0646ffce0524ff9c04fcfff50605ffe2063f000005baffce04fc
0006052d000004fc000604fc000604fc000604fc000605e9ffce0646ffce
0524ff9c04fcfff50605ffe2063f000005baffce072c0006072c00060819
ffce0876ffce0754ff9c072cfff50835ffe2086f000007eaffce05a50000
06b3ffce06acffce0563000006cfffe206a5000005ab0000059300000689
00000797ffce0790ffce06c8ff9c0647000007b3ffe20789000006faffce
068f000006770000057e0079068900000797ffce0790ffce06c8ff9c0647
000007b3ffe20789000006faffce07ae007908b9000009c7ffce09c0ffce
08f8ff9c0877000009e3ffe209b90000092affce03a3000004b1ffce04aa
ffce03e2ff9c0361000004cdffe204a300000414ffce03a9000003910000
029800350298001405fa000006feffce075bffce061c0000071affe20754
000005f60000064200000554000005f500000761ffe20737000006a8ffce
063d00000625000004dcfff104dcfff106160000071affce0777ffce0655
ff9c063800000736ffe20770000006ebffce06120000065e0000056f003f
06160000071affce0777ffce0655ff9c063800000736ffe20770000006eb
ffce079f003f08460000094affce09a7ffce0885ff9c086800000966ffe2
09a00000091bffce04980068049800680498006804980068049800680498
006804980068049800680498006804980068049800680498006804980068
049800680498006804980068049800680498006804980068049800680498
006804980068049800680498006804980068038d006a038d006a038d006a
038d006a038d006a038d006a038d006a038d006a0458fffb0458fffb0458
fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb
0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458fffb0458
fffb0458fffb0458fffb0458fffb0458fffb0458fffb0246009f0246001f
0246ffd20246ffb0024600700246fff00246ffb70246ff880246ffcc0246
ffcc0246ffb1024600a6024600470246ff9c024600050246ffe0043f0069
043f0069043f0069043f0069043f0069043f0069043f0069043f00690442
008d0442008d045400000454000004540000045400000454000004540000
045400000454000004540000045400000454000004540000045400000454
000004540000045400000602006406020064060200640602006406020064
060200640602006406020064060200640602006406020064060200640602
006406020064060200640602006406020064060200640602006406020064
060200640602006406020064045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe
045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045dfffe045d
fffe045dfffe045dfffe06b0fffe06b0fffe06b0fffe06b0fffe06b0fffe
06b0fffe06b0fffe06b0fffe06b0fffe0417006804170068041700680417
00680417006804170068041700680417006804e3006804e3006804e30068
04e3006804e3006804e3006804e3006804e3006804e3006804e3006804e3
006804e3006804e3006804e3006804e3006804e3006804e3006804e30068
04e3006804e3006807360068073600680736006807360068073600680736
0068073600680736006807360068026100680261003f0261fff20261ffd0
02610068026100100261ffd70261ffa80261ffec0261ffec0261ffbc0261
0068026100670261ffbc0261002902610003048300690483006904830069
048300690483006904830069048300690483006904330068043300680433
fffa0433fffa0433fffa0433fffa0433fffa0433fffa0433fffa0433fffa
0433fffa0433fffa0433fffa0433fffa0433fffa04de003f04de003f04de
003f04de003f04de003f04de003f04de003f04de003f04de003f04de003f
04de003f04de003f04de003f04de003f04de003f04de003f04de003f04de
003f04de003f04de003f0731003f0731003f0731003f0731003f0731003f
0731003f0731003f0731003f0731003f04fc000604fc000605e9ffce0646
ffce0524ff9c04fcfff50605ffe2063f000005baffce074f0006074f0006
083cffce0899ffce0777ff9c074ffff50858ffe208920000080dffce057e
0079068900000797ffce0790ffce06c8ff9c0647000007b3ffe207890000
06faffce07d1007908dc000009eaffce09e3ffce091bff9c089a00000a06
ffe209dc0000094dffce056f003f06160000071affce0777ffce0655ff9c
063800000736ffe20770000006ebffce07c2003f08690000096dffce09ca
ffce08a8ff9c088b00000989ffe209c30000093effce0247008a024700b2
024700a1024700790247ffb30247fff00247ffec0247ffb30247fff10247
00040247ffb30247ffe30247ffe30247ffb30247008a0247001b0247fff6
024700a3023000a802980079025300630589007904c7002e048b00790446
002904d30079079000250458007105630079056f00790533002e06440042
058200790705007907990079059700750480007704be0042049000120490
001204e2001506d100420503002f0502002f04ff007905c4ffe205c4ffe2
02980079076200250557007905700024056c0079058200790502002f068a
007504fc000604fc000606ee0000049a0079053a0076053a007607620025
04580071044300710589007905890079053a0077053a0077053a00770496
006f04cd002504cd002504cd00250502002f0446007906cd00790446ffaa
048300150492001504c7005b06db005b069e005d0456005d077900240789
007904df007705bf00420458007a055a002404b8006a0427002404730049
03a200140423006a05d3001203aa0050045c006a048b006a04370034052e
003904bd006a05d6006a0658006a04570067038700690417003904080013
0408001303f8001705ed00390444002904450029046a004004a6000004a6
000005b600120477006a0479002504ac006a04b6006a043f002905620068
022c004f03e8005003e800500605005003e7007a03f8005f03ee005505b6
001203aa005003a7004104b8006a04b8006a043f0069043a0069043a0069
03c30050040800140408001404080014043f00290393006a05fc006a03a2
ffbb03cf001703de001704700069062c00690583004703b70047060f0025
0655006a0401006804d9003903b9006d0465002504e700680449001d0433
006803d200270431006806b8003603e6005d04a1006804d90068049d001d
057f003904e30068063100680688006804ac006a03ef0069043900390416
00160416001604580016062000390476002a047c002a046d00680538000a
0538000a0261006806b6003604a2006804b0002404d9006804e300680476
002a05bb0065045dfffe045dfffe061efffe041700680487006904870069
06b6003603e6005d03e6005d04e7006804e7006804830069048300690483
006903fb005d041a0028041a0028041a00280476002a03d20068064c0068
03d2ffa5040c0016041b001104490049060e004905d3004c03eb004c066a
002406a10068043f00690512003903ed007d049d002403f6003f046f0068
0473004a03af006903e800530563005f03aa005005220050042c0069027f
0015045b0068042800680472001e045c0049046a0050045b005002460061
0263ffed02180030048f003f068c0049069900530472005304920062061e
006905ee006405c700680342002203420022033300220346004a032f004e
03370022043100640370005e0256ffa7027effa7032d0022023cff74026c
ff7402b5fff3063200060408000803a5000003a3005103ea005103a70039
02e7000602dc000a0305001e03a900730642005a042f006a0428006d0474
006804b600680225ff740423fff6039d00610460006804a7006802e70006
02dc000a06ca006906d300690711006905460025043500250465002505c1
002506a8004f04c9003f049a003f04ac0032041a00aa056b0022056b0022
0418fffc05a8fff40611005f0447004103d00069047700680486004603f5
006603ab0050024800540236000704490066039d002905730065048d0053
0457006903c7005a0491005a0490005a04a5001d068f0055041c0071043f
0069043f006903fd006704400021041a002103fe00320459004904ac0078
05e5005a04b70078040e0013062c002003970051039f005403be0050046d
00250393006a040f00000489006a03f50068053f00230479002503b00015
04d0002f0395005d03a0002203d9005d035b005d0365004f039b006403f6
005d01ef005d01e7002503af005d031a005d04af005d03f2005d03f2005a
03d50064037800580357005d0399005d035c002c03d40053055b001e02ef
004c02ef0031034c005d046f005303460038034e005d02ee005d02ee004e
02a2004a0294003602f7004101c2004c0319004004db004e034a004e032c
005d02c60053032c005d032c005d03500047021c002e034b0047030b004a
04d300470313002702fd000c03530090033100190322005b0420005d02f9
000f01c2004e0284004e034b004703130027035300900331001903080061
0420005d02f9000f06850049046bffbe04700069028affe906dafff804a9
fff8047dffd1036dffee034dffda03ac003502ddffdc03ba005103f40008
0374005003da002806f700250282001702a7002604be000b049f000804aa
fffa0461003004700069026c004f054200680432003f022c003f06a80053
0477004104730049034f00530370005e0306ff870408001303de001703a3
005103e80050046f00680478006903e7005603b9006d03aa0050049a005f
0239005303b1005a0289ffeb046b0049038f0041034c004302ab005d02d2
005d0330005d029f004001eb004b01cd000e0342005c034b004701ea000f
01c2004001cb005001f30015020efff101ef003601b9003d02a4005004d2
004e04d30047038cfff6039d004e034e004a032c005d0435005c029b0056
01f6fff6021c002e037300080325005d0336003b0318003f0313001902bf
004d0351004d02ea004d02b7003e0342006a034900410349004f01b40015
0284004e027b002c02c0002c030800160497002f0313002701e500910325
009101c5006901c5004701c5006901e3005001e30050020e0005020e000a
046e007c046e007c046e0074046e007401810082022900370229003c0181
0082024c001e022900050229006e0231006e0209005a021f0078021f0064
022c001e022c001e022c001e022c001e016bfefb02d400280309002701b9
0040029b005602e800240218000a03340064033400640334006403340064
0334006403fc006403fc006403fc006403fc00640334002003fc001603fc
001303fc001403fc001703fc00170334000803fc000403fc000403fc0004
03fc000403fc00040334ffff03fcfffe03fcfffe03fcfffe03fcfffd03fc
fffc0334fffc03fcfffc03fcfffc03fcfffc03fcfffb03fcfffb03340020
03fc001303fc001603fc001603fc001603fc001603fc006403fc006403fc
006403fc00640334002003fc001603fc001603fc001303fc001403fc0017
0334000803fc001803fc001803fc001803fc001803fc00180334ffff03fc
001c03fc001c03fc001c03fc001c03fc001c0334000803fc000403fc0004
03fc001803fc001803fc00180334002003fc001403fc001303fc001603fc
001603fc001603fc006403fc006403fc006403fc00640334002003fc0016
03fc001603fc001603fc001303fc00140334000803fc001803fc001803fc
001803fc000403fc00040334ffff03fc001c03fc001c03fc001c03fc001c
03fc001c0334000803fc001803fc001803fc001803fc001803fc00180334
002003fc001703fc001403fc001303fc001603fc001603fc006403fc0064
03fc006403fc00640334002003fc001603fc001603fc001603fc001603fc
00130334fffc03fcfffb03fcfffb03fcfffc03fcfffc03fcfffc0334ffff
03fcfffc03fcfffd03fcfffe03fcfffe03fcfffe0334000803fc000403fc
000403fc000403fc000403fc00040334002003fc001703fc001703fc0014
03fc001303fc001603fc006403fc006403fc006403fc006402ea00b102ea
00b102b30032034200660301004702b30032026d000f01ef003c01ef003c
024700410229003c0391003c03910037029c0002017e0073026b008c026b
0082026b008c026b008203820032038200320382003c027a004602a20046
0269003202b90032044100820441008202ef004c02ee005d032c005d02e8
002402ee004e040000000800000002ab000002000000015500000000ffdc
0000ff250000ffdc0000fe51019a000001c7000002f7000001c500690301
006902e5005402a8006c021c00aa054a004b046e0045046e006d046e0055
046e006106a80053046e001e0a070079082600790708002a046e0053046e
0026046e00380953001e046e0029046e0032046e006204e60006046e0049
046e0077046e006c0810006407bc0015076d007e076d0063076d007e076d
0063076d0073076d003a076d007e076d0086076d007e076d0073076d0086
076d0090046e00920539ffdd053902590539ffdd053902590539ffdd076f
007704db004d04d2007904060032046e001004c80077048c002806090064
04670066042b00b003570013039a00380408006903e000140000fd710000
fd7c0000fd690000fd820000fe450000fe4c0000fe740000fe760000fe43
0000fe430000fd8d0000fd8d032f00140000f73f0000f7290716004d06ad
007904e1fff2075a007906d60011090800790449006706430032054a0020
08eb00770580007708bf007708bf00770716004d044a006d059b007805ad
006a0436ffeb0654006a0520ffea073f006a038a004605c100450471001e
08010069048a006905f9006805f90068059b007803750069065f00390609
00680472fff406950068060200040815006803cc00530599002804b3001e
084d006904cb006906a6006706a60067065f003903cc0069099b006403e3
006f0293002603680023036a003603da003e0370004f03d0005f0364003e
03e0005e03cf004d099b0064099b0064099b0064099b0064099b0064099b
0064099b0064099b0064099b0064099b0064099b0064099b0064099b0064
099b0064099b0064099b0064099b0064099b0064099b0064099b0064099b
0064099e0064099e0064099e0064099f0064099e0064099e0064099e0064
099e0064099e0064099e0064099e0064099e0064099e0064099e0064099e
0064099e0064099e0064099e0064099e0064099e0064099e00640000fe6f
0000fe4508c800f9057300340573003405fa009505fa009505fa008c05fa
009505fa009505fa009505b9007205b9007207f600a207f600a207f600a2
060200950602009503ec009503ec009505fa009505fa009505fa009505fa
009105fa009505fa009505d100000487006f03be009b056900790490006a
04c4006805fa009505fa008a0417001d0449001d04b8003607a3000c0497
003f0497003f0497003f0497003f0497003f02d500e402d500e402d500e4
02d500e402cd00cc02cd00cc02cd00cc02d5002b02d5002b02d5002b02d5
002b02cd002302cd00aa02cd0023030000e4030d00e4032100e4032b00e4
031400e4031400e4031400e403000026030d002603210026032b00260314
0003031401580314000305db0087042d0024045c007604b200de04d500de
05ab00800913015b0a9b00b310a600ce17310159046e004e0541ff8805f1
ffb5045200000601ffb5061effb50624ffb505feffb506a9ffba06c7ffba
0771ffba0822ffba0bccffba052500f30516ff8f0516ff8f059f005a0587
00460544004605440046056b006902ff0039045a003904b1008704c10091
067400e6084600e60a6e00e607630087079c009109a200e60c4300e60a15
00870a7700910cd000e6104000e604cf007a04db0087067400e6084600e6
07990091079c009109a200e60c4300e60a4900910a72008c0cd000e61040
00e6051100280516003106740015096e00d8050e00280516003106740084
0846007c0533002805160031067400840846007c077b009505e200950675
006e057f004202ed00c805b2007c05fa009505fa009505fa009505fa0095
05fa009505e3009505e3009505fa009505e3009505fa009505fa009505fa
009505fa009504db009504280095071e009505c2009505c2009506830095
073d0095073e008505870046059a00de04fe009504fe009504fe009505d8
007c09d300e609d3045909d304590497ff880497ff880497ff880497ff88
0497ff8805b600de05b60046073e007c0544005205b6004605b600460562
00640558006e056b00750544005205440052054400460544005205a7006e
05a7006e0544004605440052054400460544005205c5002005c5000505c5
002005c500050957005a095700730816008205c6008206ce007805c8008c
05fa009505fa009505fa009505ca009605ca009606b40073041d0032041d
003205ab00800913015b10a600ce05ab00800913015b10a600ce0cc70087
0d520091143d00e604b1008704c10091084600e604b1008704c100910846
00e604b1008704c10091084600e604b1008704c10091084600e604b10002
04c10013084600a704b1008704c10091084600e604b1008704c100910846
00e604b1001804c10022084600e604b1008704c10091084600e604b10087
04c10091084600e60696008806960088084600e604b1008704c100910846
00e604b1008704c10091084600e604b1008704c10091084600e604b10087
04c10091084600e604b1008704c10091084600e6051400a002e000a007a2
00950377005105fa009505fa009505fa00950266009605200014052000be
05e2009505e2009505fa009505fa009505e3009505fa009505fa009508ac
009505fa009105fa004b05fa009105fa009505fa009105fa009505fa0091
05fa009505fa009505fa0095060200950602009505fa009505fa009505fa
009505fa00950982009505fa009505fa009505fa009505fa009505fa00ac
05fa009505fa00ac05fa009505fa009505fa009505fa009505fa009505fa
009505fa0095057300a005c200950607009502ff003904e6007a06ab0032
0564003204b100780473007304dd007304b1007805040067052500f30525
ff9c0000fd940321000004890000078900000e6f00000296000003210000
04890000078900000e6f00000000fd9404430000046e000004230085046e
00a80556005a04900047099b0064047e0055046e005504960055046e0051
046e006e046e006e0487006e046e006900>
<00000000000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000000ec000000ec000000ec000000ec000000ec000000ec000000ec0000
00ec000000ec000000ec000000ec000000ec000000ec000000ec000000ec
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c8000001c8000001c8000001c8000001c8000001c8000001c8000001c8
000001c8000001c8000001c8000001c8000001c8000001c8000001c80000
01c80000020c0000020c0000020c0000020c0000020c0000020c0000020c
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
000002660000026600000266000002660000026600000266000002660000
026600000266000002660000026600000266000002660000026600000266
0000026600000266000002660000026600000266000100001c9c00c0002d
0097000600020010002f00660000095b111f000300010000000e00ae0000
000300000000006400000000000300000007007600640001000000000000
003200da00010000000000030012010c00010000000000040012011e0001
000000000006001201300001000000000007003b01420003000104090000
0064017d0003000104090001002401e10003000104090002000e02050003
000104090003002402130003000104090004002402370003000104090006
0024025b00030001040900070076027f00a9002000320030003100330020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006d00620072006900610020006900730020006100200074007200610064
0065006d00610072006b0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000670072006f007500700020006f
006600200063006f006d00700061006e006900650073002ea92032303133
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e545a595546472b43616d627269614d61
7468545a595546472b43616d627269614d617468545a595546472b43616d
627269614d61746843616d6272696120697320612074726164656d61726b
206f6620746865204d6963726f736f66742067726f7570206f6620636f6d
70616e6965732e00a9002000320030003100330020004d00690063007200
6f0073006f0066007400200043006f00720070006f007200610074006900
6f006e002e00200041006c006c0020005200690067006800740073002000
520065007300650072007600650064002e0054005a005900550046004700
2b00430061006d0062007200690061004d00610074006800520065006700
75006c006100720054005a0059005500460047002b00430061006d006200
7200690061004d0061007400680054005a0059005500460047002b004300
61006d0062007200690061004d0061007400680054005a00590055004600
47002b00430061006d0062007200690061004d0061007400680043006100
6d0062007200690061002000690073002000610020007400720061006400
65006d00610072006b0020006f006600200074006800650020004d006900
630072006f0073006f00660074002000670072006f007500700020006f00
6600200063006f006d00700061006e006900650073002e0000>
<b9002001feb40918014a20b801fab40918014a20b801f9b40918014a20b8
01f8b40918014a20b801f7b40918014a20b801f6b40918014a20b801f0b4
0918014a20b801efb40918014a20b801eeb40918014a20b801edb4091801
4a20b801ecb40918014a20b801ebb40918014a20b801e6b40918014a20b8
01e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b4
0918014a20b801e1b40918014a20b801e0b40918014a20b801d3b4091801
4a20b801d2b40918014a20b801d1b40918014a20b801cfb40918014a20b8
01ceb40918014a20b801cdb40918014a20b801ccb40918014a20b801a0b4
0918014a20b8018fb40918014a20b8018eb40918014a20b8018ab4091801
4a20b80188b40918014a20b80187b40918014a20b80186b40918014a20b8
015bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b4
0918014a20b80154b40918014a20b80150b40918014a20b8014cb4091801
4a20b8014bb40918014a20b8014ab40918014a20b80136b40918014a20b8
0130b40918014a20b8012fb40918014a20b8012db40918014a20b8012cb4
0918014a20b80109b40918014a20b80107b40918014a20b8010540ff0918
014a20f40918014a20f20918014a20f10918014a20f00918014a20ef0918
014a20ed0918014a20ec0918014a20ea0918014a20e50918014a20e40918
014a20e30918014a20e10918014a20de0918014a20da0918014a20d80918
014a20d30918014a20cd0918014a20cc0918014a20ca0918014a20c90918
014a20c80918014a20c60918014a20c40918014a20c20918014a20c00918
014a20bf0918014a20bd0918014a20b30918014a20b10918014a20af0918
014a20a50918014a20a40918014a20a00918014a208e0918014a208d0918
014a208c0918014a208b0918014a208a0918014a20890918014a20850918
014a20840918014a2083091801403e4a20800918014a207f0918014a207e
0918014a207d0918014a20620918014a20510918014a20500918014a2048
0918014a20420918014a200e0918014a0f41630441001f0441002f044100
3f0441004f0441005f0441006f0441007f0441008f0441009f044100af04
4100bf044100cf0441000d005f03ea0001008003f4009003f400a003f400
b003f400c003f400d003f400e003f400f003f40008002f0433003f043300
4f0433005f0433006f0433007f0433008f0433009f043300af043300bf04
33000a001f0434002f0434003f0434004f0434005f0434006f0434007f04
34000700cf042300df042300ef04230003000f0423001f0423003f042300
5f0423009f0423402305f0e201b0fdc0fd02c0fdd0fde0fdf0fd04d0fde0
fdf0fd03c0ffd0ffe0fff0ff0470410a0425000100c0042500d0042500e0
042500f00425400c04e0bef0be02e0bef0be020f41110421003f04210002
001002580001000f025800e002580002000f040a0001000f0408b4010f26
010f411b04070001000f04060001007f02170001000f029c001f029c002f
029c003f029c004f029c005f029c000600df029c00ef029c00ff029c4053
03dfe016171cd4d516171c7b7c161b7b7c19d1d216171c767716171c6d70
16171c6c6f16171c6b6e161b6b6e7f721a747514151c676a14151c666914
151c6568141b656885711a1973167a431921794319211941310292009902
920002001c0292002c029200020299029a029b000c028d028e028f000c02
8a028b028c000c001b0299008b02990002000f0299009f029900bb029900
db0299000402a5028b02a7000d029f029a02a1000d029c028e029e000dff
e8028eb2142339b9ffe8029ab2142339411a0282027d0008002b0281027c
0005002b027e027a0004002b027d027a0004002b027a02570005002b0277
02670005002b02670257b2052b20b80270b21b2039bd027202570004002b
026e0257b2042b20b80257b331333909414102710019027100aa025700b8
025700040069027100da025700e802570003028402790006002b02800279
0004002b027f02790008002b027b02790008002b027902560006002b0278
02660000002b027602660008002b027502660008002b027302660008002b
026602560006002b027402560000002b027302560000002b026f0256b207
2b29415002560001008602560001025d025e025f000c025102520253000c
024e024f0250000c000b024e000b0251000a025d003b024e005902510076
02510075025d009b024e00b5025d00d9024e000a0269024f026b000d0263
025e0265000d026002520262000d0269003c0263003c0260003c025d003c
0251003c024e003c0244023c0005002b024302110002002b0240023c0005
002b023e02110004002b023d0211b2042b464115023c00010046023c00c6
023c0002023b02110007002b023902110006002b023702110004002b0221
0211b2072b20b80233b21316394116022f02110004002b022e0211000400
2b022d02110005002b022c02110004002b022b02110004002b022a0211b2
052b474142021100010005021100a502110002003b0233004b0233006402
11007402110004024202100007002b024102100005002b023f0210000200
2b023a02100007002b023802100007002b023602100007002b0235021000
07002b022002100007002b023402100005002b023102100005002b023002
100007002b022902100007002b02280210b2072b8a416e02100001001a02
1000b902320002021702180219000c020b020c020d000c02080209020a00
0c000b0208000b020b000a0217003b02080059020b0076020b0075021700
9b020800b5021700d90208000a022302090225000d021d0218021f000d02
1a020c021c000d0223003c021d003c021a003c0217003c020b003c020800
3c0153014d0002002b014e014d0002002b0156015c0004002b0155015c00
04002b0157015c0002002b01da01d4000a002b01d801d4000a002b01e501
e00005002b01e101e00005002b01e001eb0005002b01ef01eb0002002b01
ec01ebb2052b40b801ebb2090a39b9ffc00104b2313139b9ffc00104b21b
2039b8ffc0b4c71f203940b80103b22c2c39ba010301000100b21f2223b9
01030100b3c01e1e23ba010301000100b21d1d23b901030100b3c01c1c23
ba010301000100b21b1b23b901030100b3c0141a23b901030100b3800b13
23b901030100b340090a23b901020101b340508b23b901010100b340508b
23410a01020100004f001f01010100004f001fffc00100b2505539b9ffc0
0100b323233940b80100b71d1e3940e81b1b39b8ffc0b4e724253956b801
08401301ddd8052b3bd64bd60240b00b0d39c1c0052bb8ffc040379f1313
39409c2f30399c9a012b9b9a052b9a91042ba999042b9992032b40c52c31
399291032b889198910209631863c7630320630d0f39b8fff0b4471f2539
cbb8010a401c019895012b379e019695022b1897262a3917970110953f40
39d99501bc0136012c0003002b0130b2cd042bb8012fb2cc042bb8012db2
cd032bb8012cb2cd042bbc014c014a0003002b014ab27f052bb9015b0154
b2042b0f41190154001f01540002018601880002002b018701880004002b
018901880004002b0188018f0003002b018e018f0004002b018fb385052b
3f410c01a0000101ce01cc0003002b01d201cc0006002b01d101ccb2062b
40b80107b2323239b80107b2af032bb8ffc0b3de1e2039b8ffc04011dc18
1a39c9ca032bcac8042b40c8212239b8ffc0b3c8151739b8ffc0b3c62425
39b8ffc0b3c6161a39b8ffc04023bf2d31395051032b40511b1b39e5cc04
2be4e3032b40e32a2a39cdcc052b40cc424439b8ffc0b3cc272739b8ffc0
b7cc171a39c2ea012bb80109b2da032bb8ffc04033ea252539dfea0140c4
1b1d39b3b1052bb1c0052b40c03d3d39c0af042bd3af052baf7d052b20da
121639c5bd01208e01108e01b8ffc0b38b363839b8ffc0b38b272b39b8ff
c040328b171a398c8d052b8d8a042b898a052b8a7f052bf4ef032bf2ef05
2bf180022bf0a0042bef85052b40ec32343940ec1b1d39b8ffc0b3a05152
39b8ffc0b3a0454739b8ffc0b3a0383c39b8ffc0400ba02c3139dfa001a0
80022bb8ffc0b394313139b8ffc040d480181a39817f012b7e7d052b7d7f
052bed7f052bd87f017f85251f8885012b8785012b8485052b8385052b29
8539854985036685014685013685012685011b3715183615153515123415
0f33150c3215093115063015032f15002e15f9fa0f20f930f90226270e28
270f2a2b0e2c2b0f22230e24230f1e1f0e201f0f00051005023c3d0e0b3c
743c993c030f10110c090a0b0c0607080c0304050c0001020c0603641f70
2a010f2a010b0f4b0f020b003b0044037403ab00db0f060b000b030b0f3b
003b0959035b0976039b009b09990fd9000cb9010b010c402a0f1b011d0d
18071a0d1510170d1204140d2ff96ff99ff9a0f9cff9d0f9063ff940f9af
f9b0f9e0f90500b8010bb22ff92fba010b003f010b402e04fb3cf93cf73c
f53c2c3c2a3c283c263c243c223c203c1e3c1b3c183c153c123c0f3c093c
063c033c003c50335401b0124b004b5442b013014b004b5342b0332b4bb8
032052b0322b4bb009505b58b101018e59b0332bb00288b8010054b00488
b8020054b012435a5b58b80119b101018e851bb900010100b04b60858d59
2b2b1db0644b5358b0801d59b0324b5358b0901d59004bb03251b01b2342
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b73
747573742b2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c45
60442b2b732b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b2b
2b2b2b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b2b
2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b732b2b2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b2b
74742b2b2b2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b
2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b2b
2b2b2b2b2b2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b017374
2b2b2b2b2b2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b73742b2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2bb109322b4bb0505242b002435c4bb064524bb01e505b60b01a
23424bb0c8524bb036505bb00c2342007374737373737373737473737473
75737374757373747373737373b100024354b102024354b1060243545b5b
58416301fe006401fa006401f9006401f8006401f7006401f6006401f000
6401ef006401ee006401ed006401ec006401eb006401e6006401e5006401
e4006401e3006401e2006401e1006401e0006401d3006401d2006401d100
6401cf006401ce006401cd006401cc006401a00064018f0064018e006401
8a0064018800640187006401860064015b0064015a006401590064015800
640154006401500064014c0064014b0064014a0064013600640130006401
2f0064012d0064012c006401090064010700640105406964f464f264f164
f064ef64ed64ec64ea64e564e464e364e164de64da64d864d364cd64cc64
ca64c964c864c664c464c264c064bf64bd64b364b164af64a564a464a064
8e648d648c648b648a64896485648464836480647f647e647d6462645164
5064486442640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b0000>
[615 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
4 524 3404 <000300950137058f035b000300070008002d401007be900501cf05df05ef
0503b0050105b803f6b30802be00ba03f6000803eb003ff6ed10f65d5d71
ed31301335211501352115139504d0fb3004d02a02d68585fe6185850112
>HIBBAA+CambriaMath AddT42Char 
4 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>HIBBAA+CambriaMath AddT42Char 
HIBBAA+CambriaMath /CharStrings get begin
/equal 3404 def
end
HIBBAA+CambriaMath /Encoding get
dup 61 /equal put
pop
end
%ADOEndSubsetFont
/FHSKMC+CambriaMath /HIBBAA+CambriaMath findfont ct_VMDictPut
/FHSKMC+CambriaMath*1 
[61{/.notdef}rp /equal 194{/.notdef}rp]
FHSKMC+CambriaMath nf
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
122.48 169.194 mo
(=)sh
191.926 116.706 mo
194.352 117.128 196.085 118.571 197.125 121.035 cv
198.038 123.197 198.55 126.286 198.661 130.302 cv
198.685 130.302 li
198.685 132.034 li
198.685 139.074 li
198.685 143.48 li
198.685 152.274 li
198.685 155.424 li
198.685 158.114 199.019 160.135 199.687 161.489 cv
200.355 162.842 201.272 163.542 202.438 163.589 cv
202.438 164.644 li
201.248 164.691 200.325 165.388 199.669 166.736 cv
199.013 168.083 198.685 170.081 198.685 172.73 cv
198.685 175.902 li
198.685 184.674 li
198.685 189.066 li
198.685 196.106 li
198.685 197.874 li
198.66 197.874 li
198.547 201.872 198.035 204.949 197.125 207.106 cv
196.085 209.569 194.352 211.012 191.926 211.434 cv
191.926 210.599 li
193.643 210.195 194.891 208.836 195.67 206.521 cv
196.449 204.207 196.839 200.635 196.839 195.807 cv
196.839 189.066 li
196.839 184.674 li
196.839 175.902 li
196.839 174.259 li
196.933 170.837 197.377 168.391 198.171 166.92 cv
198.965 165.45 199.775 164.538 200.601 164.187 cv
200.601 163.967 li
199.763 163.621 198.926 162.672 198.092 161.119 cv
197.257 159.567 196.839 157.159 196.839 153.895 cv
196.839 152.274 li
196.839 143.48 li
196.839 139.074 li
196.839 132.333 li
196.839 127.505 196.449 123.934 195.67 121.619 cv
194.891 119.305 193.643 117.945 191.926 117.541 cv
cp
152.958 116.706 mo
152.958 117.541 li
151.241 117.945 149.993 119.305 149.214 121.619 cv
148.434 123.934 148.045 127.505 148.045 132.333 cv
148.045 139.074 li
148.045 143.48 li
148.045 152.274 li
148.045 153.895 li
148.045 157.159 147.627 159.567 146.792 161.119 cv
145.957 162.672 145.121 163.621 144.283 163.967 cv
144.283 164.187 li
145.109 164.538 145.919 165.45 146.713 166.92 cv
147.507 168.391 147.951 170.837 148.045 174.259 cv
148.045 175.902 li
148.045 184.674 li
148.045 189.04 li
148.045 195.781 li
148.045 200.609 148.434 204.18 149.214 206.495 cv
149.993 208.809 151.241 210.169 152.958 210.573 cv
152.958 211.408 li
150.532 210.986 148.799 209.543 147.759 207.079 cv
146.851 204.928 146.339 201.859 146.224 197.874 cv
146.199 197.874 li
146.199 196.08 li
146.199 189.04 li
146.199 184.674 li
146.199 175.902 li
146.199 172.73 li
146.199 170.081 145.871 168.083 145.215 166.736 cv
144.558 165.388 143.636 164.691 142.446 164.644 cv
142.446 163.589 li
143.612 163.542 144.529 162.842 145.197 161.489 cv
145.865 160.135 146.199 158.114 146.199 155.424 cv
146.199 152.274 li
146.199 143.48 li
146.199 139.074 li
146.199 132.034 li
146.199 130.302 li
146.223 130.302 li
146.334 126.286 146.846 123.197 147.759 121.035 cv
148.799 118.571 150.532 117.128 152.958 116.706 cv
f
%ADOBeginSubsetFont: HIBBAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FHSKMC+CambriaMath gcheck setglobal} if
4 456 3397 <00010095ffc7056504cc000b0014b608060abe030100b803e8003fcd33fd
32c6313001112311213521113311211503448efddf02218e02210207fdc0
0240850240fdc085>FHSKMC+CambriaMath AddT42Char 
FHSKMC+CambriaMath /CharStrings get begin
/plus 3397 def
end
FHSKMC+CambriaMath /Encoding get
dup 43 /plus put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FHSKMC+CambriaMath*1 
[43{/.notdef}rp /plus 17{/.notdef}rp /equal 194{/.notdef}rp]
FHSKMC+CambriaMath nf
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
153.32 149.154 mo
(+)sh
180.395 119.618 mo
182.636 119.618 li
182.636 119.634 li
191.6 119.634 li
191.6 120.834 li
181.64 120.834 li
181.64 120.787 li
181.045 120.787 li
176.317 136.941 li
175.464 136.941 li
171.826 129.119 li
170.34 129.778 li
170.068 129.119 li
172.951 127.801 li
176.053 134.621 li
cp
f
%ADOBeginSubsetFont: HIBBAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FHSKMC+CambriaMath gcheck setglobal} if
4 236 884 <00010081000003c90565002800624033201d121209181816081d16031a16
9b401d040905401013480528082803289f0819191209050706208c12122a
19280909188e192fe1332f331112392ff1d632cd1112392f002fed2b0018
10c62b333f1aed322b11120039182f1139111239313025323e0237330321
3536363736373e02353426262322072335363633321615140e0307060702
be313c2415105511fcc92b9286743338371830634bbb417979d354babe15
2d4c5c71be59a00c1c2d2ffedc3069dc95804248695d2f4b7342d0c03933
a39b355957646778c996>FHSKMC+CambriaMath AddT42Char 
FHSKMC+CambriaMath /CharStrings get begin
/two 884 def
end
FHSKMC+CambriaMath /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FHSKMC+CambriaMath*1 
[43{/.notdef}rp /plus 6{/.notdef}rp /two 10{/.notdef}rp /equal 194{/.notdef}rp]
FHSKMC+CambriaMath nf
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
181.64 135.474 mo
(2)sh
175.646 161.16 mo
(2)sh
169.76 143.394 mo
191.6 143.394 li
191.6 144.594 li
169.76 144.594 li
cp
ef
%ADOBeginSubsetFont: WGJAAA+CambriaMath-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/WGJAAA+CambriaMath 1 GetGlyphDirectory
3398 <001C60D8A8C9B61E1368B22F78F4F884FCA6DC0E2A1689> |
!
end
end end
%ADOEndSubsetFont
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
153.32 197.634 mo
(\015F)sh
180.395 168.098 mo
182.636 168.098 li
182.636 168.114 li
191.6 168.114 li
191.6 169.314 li
181.64 169.314 li
181.64 169.267 li
181.045 169.267 li
176.317 185.421 li
175.464 185.421 li
171.826 177.599 li
170.34 178.258 li
170.068 177.599 li
172.951 176.281 li
176.053 183.101 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
181.64 183.954 mo
(2)sh
175.646 209.64 mo
(2)sh
169.76 191.874 mo
191.6 191.874 li
191.6 193.074 li
169.76 193.074 li
cp
ef
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic Initial
ct_T42Dict begin
-0.723 -0.273 1.258 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+Calibri-Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e0b6a5000000cc000000606376
7420ba7ecec70000012c000005146670676da1ea42ac0000064000000913
676c7966a7e7bf090000a0000000015068656164eec03d2a00000f540000
0036686865610da91a1500000f8c00000024686d74787c64eb9c00000fb0
00003dae6c6f636100143f1000004d6000003db86d61787019e613350000
8b18000000206e616d65f575db5f00008b38000003c4707265705fc3ffe0
00008efc00001102676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
0202040a0204e00002ff4000acff00000001000000004d53202000010000
feff0600fe0001c4079e02262000019f0000000003bd0511000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
00000000000000000000004a004c00540055005600570059004f004e004f
00500051004d005d005f00610063006400650066006700680069006a006b
006c006d006e006d0066006f007000710072007300740075007600710074
00700071007200740075007600780079007a007d00780079007a007b007c
007d0079007c007a007c007d007e007f00800081007e007f008000810082
007f008000810082007e007f008000810082008300850083008400850086
008700880089008600880089008300840085008600870088008900830084
00850086008700880089008a008b008c008d008e008f008a008b008c008d
008f008a008b008c008d008e008f008a008b008c008d008e008f00900095
00900091009200930094009500980099009a009b009c0090009100930096
0097009b009c009f00a20094009600900091009200930094009500960097
00980099009a009b009c009d009e009f00a000a100a200a300a600a70090
00910092009300940095009600980099009f00bc00bd00c100c600be00bf
00bf00c100c200b900be00c200df00e000e400e700e800e9012b01360147
00f200f400cf00640066006a006c006d0070006c006d0069006c00670073
00740075007600770078007a007b007c007d007e00810084008500860087
00880089008a0076007a007b007c007e007f008000820083008400870088
0089008a0077008500870079008200840085008600870088008a0079007a
007c007d007e0081008300840086008700880089008b008c008d008e008f
00900091009200940095008b008c008d008e008f0093009400950093008b
008c008d008e00900091009200930094008c008d008e008f009000910092
009300940095009700980099009a009b009c0096009700980099009a009b
009c009a009c009600980099009a009b009c00960097009b009c009d009e
009f00a000a100a2009d009e009f00a000a100a200a1009d009e009f00a0
00a100a2009d009e009f00a000a100a200a300a500a300a400a500a600a7
00a300a500a300a400a500a600a700a300a400a500a600a700a800a900a8
00a900aa00ab00ac00a800ab00ac00a800a900aa00ab00ac00a800a900aa
00ab00ac00ad00ae00af00b000b100b300b500b600b700b800af00b000b1
00b300b400b700ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700ba00bb00bc00bd
00bf00c000c100c200c300c400ba00bb00bf00c300b900ba00bb00bc00bf
00c100c200c300ba00bc00bf00c200c700c900cb00cc00cd00c500c600c7
00c600c700cb00ce00cf00d100d200db00dc00de00df00e000e400d600e8
00e90123012b00d000d1042600d8050e010503c000c2024e0078042600d7
02990092000005e4000e40465f5e5d5c5b5a59585554535251504f4e4d4c
4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c282625
2423221f181411100f0d0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045b0
0325456164b050515845441b2121592d2c2045b0004360442d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d2c
4565b02c234445b02b23442d2c4b525845441b2121592d2c01b005251023
208af500b0016023edec2d2c01b005251023208af500b0016123edec2d2c
01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161011020
3c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21b0
8051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c
6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2c4523456023456023456023766818b08062202d2cb00426b00426
b00425b0042545234520b003266062636820b0032661658a2344442d2c20
45b0005458b040442045b04061441b2121592d2c45b1302f4523456160b0
016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b00325
45695358441b2121591b2121592d2c45b01443b0006063b0016069442d2c
b02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033ff
e0b134201bb3330034005944442d2cb0164358b00326458a586466b01f60
1b64b020606620581b21b04059b001615923586559b02923442310b029e0
1b2121212121592d2cb0164358b004254564b020606620581b21b04059b0
016123586559b0292344b00425b00725082058021b0359b0052510b00425
2046b0042523423cb0072510b006252046b00425b0016023423c2058011b
0059b0052510b00425b029e0b0072510b00625b029e0b00425b007250820
58021b0359b00425b003254348b00625b00325b0016043481b2159212121
212121212d2cb0164358b004254564b020606620581b21b04059b0016123
581b6559b0292344b00525b00825082058021b0359b0042510b005252046
b0042523423cb00425b0072508b0072510b006252046b00425b001602342
3c2058011b0059b0042510b00525b029e0b02920456544b0072510b00625
b029e0b00525b00825082058021b0359b00525b003254348b00425b00725
08b00625b00325b0016043481b2159212121212121212d2c02b004252020
46b004252342b0052508b003254548212121212d2c02b0032520b0042508
b0022543482121212d2c452320451820b00050205823652359236820b040
505821b04059235865598a60442d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d2c
b002435458b0472b1b212121592d2cb002435458b0482b1b21212121592d
2cb002435458b0492b1b212121592d2c208a08234b538a4b515a5823381b
2121592d2c0020b200400325b0062649618b3812342d2c01462346602346
6123201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a
2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb102
0042b123018851b1400188535a58b910000020885458b202010243604259
b12401885158b920000040885458b2020202436042b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2c451868234b51582320452064b04050587c5968
8a6059442d2cb00016b00225b0022501b001233e00b002233eb10102060c
b00a236542b00b234201b001233f00b002233fb10102060cb006236542b0
072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b004
2510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58b0
092b5920b005254ab0042547b004254760b0062547b0806361b00225b000
5558b00325b00725496359b0082558001b0159b00425b0062549b009255c
b009255a58b0092b59b0072546b0806361b0032520b0005558631b215961
2320b0005558b080631b21b08059b0592bb006255c586959b00425202010
b00048233ab0062658001b0159b0052658b003252f598a12233221212d2c
b00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b007
2559b00225b00225070cb005256323b00625636020b94000040063535821
b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1bb0
0426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab00b
2eb00525b0052507595920b0005558b00525b0052587b00725b007250bb0
092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b00825
b00b254923b00625b0062587b00a2510b00b25c15920b00051b800522378
b00161b00225b00725b0072507b00a25b00d254961b08062b00525b00525
0bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b006
25b0062507b00925b00c2549b0032554b8ffa72379212121212121212121
2121212d2c23b0005458b9400000001bb900004000598ab0005458b94000
00001bb90000400059b05b2b2d2c08b0005458b9400000001bb900004000
590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b05b
2b2d2cb00426b00426080db00426b00426080db05b2b2d00000100000005
deb889a613815f0f3cf50019080000000000bbeb7ccc00000000cf5896a6
fa34fdcb0a140836000200090002000100000000000100000600fe0001c4
0aa0fa34fa0b0a140800019a0000000000000000000000000f6a040e0000
000000000000000001cf000004a1ffca04a1ffca04a1ffca04a1ffca04a1
ffca04a1ffca04a1ffca04a1ffca04a1ffca04a1ffca04a1ffca061bff74
061bff74045a0054042e0073042e0073042e0073042e0073042e0073042e
007404ec005804ec005804ff003f04ff003f03e8005803e8003303e80058
03e8004303e8003b03e8005403e8004d03e8005803e8005803e8005803ad
0052050c006e050c006e050c006e050c006e050c006e04fc005204fc0052
05400074020400520204ff25020400160204ff390204ff2d0204ff4e0204
ff4c0204ff770204001b0204ff9d04920052028dffb8028dffa504280052
04280052035d0058035d005803620058035d005803700023045e005806d7
0052052800520528005205280052052800520528005205040052053c0072
053c0072053c0072053c0072053c0072053c0072053c0072053c0072053c
0072054300260543002606ef007204220052042200510550007204580052
045800520458003c04580052039e0004039e0004039efff6039e0001039e
0004039e000403e600a303e6001603e600a303e600940522009305220093
052200930522009305220093052200930522009305220093052200930522
009305220093048a00c1071f00db071f00db071f00db071f00db071f00db
0427ffd103e600bf03e6003b03e600bf03e6004d03e6006803bfffe803bf
ffe803bfffe803bfffe803f4ffb703f4ffb703f4ffb703f4ffb703f4ffb7
03f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb6055cff8b055c
ff8b0404004903ab006903ab006903ab006903ab006903ab006903ab0069
0465004c0465004c0477003d0477003d0380004d0380002d0380004d0380
00200380001f0380002c03800026038000400380004d0380004d03500047
0482006b0482006b0482006b0482006b0482006b0476004704760047049d
005901ec004701ecff4301ec001c01ecff4801ecff2701ecff5501ecff52
01ecff7101ec001101ecff8d041b0047023effb0023eff8003c9004703c9
004702e0004d02e0004d02e6004d02e0004d02f0002503d5004d06060046
047900460479004604790046047900460479004604660047049900600499
006004990060049900600499006004990060049900600499006004990060
04ba004904ba00490606006203c2004703c2004504a2006003e7004703e7
004703e7004503e70047033f0002033f0002033ffff0033fffee033f0002
033f0002035900800359fff9035900740359007f0485007d0485007d0485
007d0485007d048500730485007d0485007d0485007d0485007d0485007d
0485007d03ed0095061e00a6061e00a6061e00a6061e00a6061e00a603cc
ffda037e0086037e0011037e0086037e000a037e00180369fff10369fff1
0369fff10369fff1041d0051041d0051041d0051041d0051041d003a041d
0051041d0051041d0051041d0051041d0051041d00510609002f0609002f
041d003d0354004c0354004c0354003e0354003f0354004c0354004c0746
004c06cc004c05f1004c05f1004c041d0051047000510468005104340050
03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2004d03d2
004d03d2004d03d2004d0271ff3d0684ff3d08beff3d04abff1f0683ff3d
08bdff3d043cff3d043cff3d043cff3d043cff3d044fff3d044fff3d044f
ff3d044fff3d043cff3d043cff3d0676ff3d0676ff3d0676ff3d0676ff3d
0689ff3d0689ff3d0689ff3d0689ff3d0676ff3d0676ff3d043cff3d043c
ff3d0677ff3d0609ff3d0843ff3d043cff3d043cff3d0483ff3d043cff3d
0676ff3d04e4ff3d04e4ff3d050aff3d071fff3d041d0042041d0042041d
0042041d0042041d004203c4ffbd03c4ffbd03c4ffbd03c4ffbd03c4ffbd
041d003f041d003f042a004d01d6003f01d6ff3f01d6fff801d6ff5001d6
ff1b01d6ff6e01d6ff5101d6ff5e01d6ff8801d6003f03c0003f041b0026
01eaff3b01eaff3b01eaff3b03a3003e03a3003e03a3003f01d6003f01d6
002d021c003f01d6ffb501fb004102fd003f0654003f041d003f041d003f
041d003f041d002b041d003f048dfff2041d003f041b004e041b004e041b
004e041b004e041b0030041b004e041b004e041b004e041b004e043c002f
043c002f0684004e041dfff8041dfff8041d005102be003f02be003f02be
ffea02beffff031d0009031d0009031dfff2031dfff1031d0009031d0009
05a5000905a500090438ff2b01f1ff1a02ae007102c4007102ae006102bc
002a04e60071047500710475007104750071047500710475007104750071
0475007104750071047500710475007105130071074b007106d9007106d9
007106d9007106d9007106d9007106d9007106d9007106d9007106d90071
06d90071041d0070041d0050041d0070041d0070041d003d041d006b041d
0066041d0069041d0070041d0070041d00700391007c05b8008f05b8008f
05b8008f05b8008f05b8008f0377ffd00394001503940001039400150394
001503940014032900050329000503290000032900050372007103610081
0378005a02d800aa02d5009f024100a602d800aa02a100a801c1fff502d8
00a702da009f016200a2016dffe9029700a0015e00a0044c00a002db00a0
02d600aa02d7007602d700aa01f000a00230008301e300bb02db00c10285
00c303ef00ce027c005e0286008f0238007d025400000275000002940000
0000fd080000fce80256000002750000029400000000fd080000fce80329
0000035f0000039400000000fc9f0000fc6703290000035f000003940000
0000fc9d0000fc6901ff0000039a000003a2000003a800000000fc650000
fc600324000002f5000003460000036700000000fca00000fc7e03270000
03490000036a00000000fc9d0000fc7d030c0000030f0000031100000000
fcac0000fca9029100000298000002a000000000fce90000fce202cf0000
02c2000002b5000003c1000003e10000040000000000fc520000fc3101c9
000001d6000001ce000001ce00000000fd4d0000fd4d0275ffe90000fcdf
027ffffa0000fcec01f7ffe70231000004a1ffca04a1ff97045a00540353
00520484ffe803e8005803e8fec503bfffe804fc005204fcfeb605400072
020400520204feba0204ff4e042800520495ffcc06d700520528005203ef
0000053c0072053cff0604fc00520422005203abfff403e600a303e600bd
03e6fe8b03e60054061400000427ffd1060000bf0550000c0550fef503f4
ffb703f4ff790404004902fb004703c9ffcf0380004d0380fed10369fff1
047600470476fec904b1006001ec004701ecfebd01ecff5403c9004703e1
ffb906060046047900460387000b049900600499ff3b0478004603c20047
035bfff803590080038300830383fea3038300100552000003ccffda0558
009b04b1001204b1ff5404850051048500510439006b043afff703910078
0430000003a5002f03a5002f02c800340434003f0434003f047800400441
006c023200650232ffdd0232ff7a0232feef03a3003f03b4ffbd044efff8
0397007d0302003303030033041b004e041b004e046c00050412ffd30441
004b034900500319005204550075045500750455006904550009053b004c
0536004a0369ff7605a9007c0592005605920056028900000000fd0a03f4
00000000fc36020500f202050137020501060224ffb101ff00c501ffffed
04a1ffca044d0059045a00540370005203700052037600520527ff6903e8
005803e8003303e800540668ffff03ca0003052200520522005205220052
020400520204ff4e028dffb8045800520458005204e3ffae06faffae06d7
005204fc005207030052053c0072053c007204f9005204220052042e0073
039e000403e600a3043800490438004904b700c2059400000427ffd1051c
005404f50054047200be06f20054071e005404eb00a10618005804400058
0462001e04610070070900520471fffb04ff00a004f200a10504000003f4
ffb703ee004c040400490314004703140047032700470480ff770380004d
0380002d0380002c0578ffeb0380000e04890047048900470489004701ec
004701ecff55023effb003c8004603c800460432ffa90606004604760047
04990060049b0060046a004703c2004703ab0069033f000203590080039d
003b039d0000042f0094050a000003ccffda048e004a0469004a03fa009a
0623004a0645004a045f007a0583004903e8004903e4002603f00062062f
004703ff0000045f008104630082044d00000601ffa906320047041d0051
044300000430000003d5004a0349001f0349001f02d5003f01d6ff510435
0050041d004203d2004d03d2004d03d2004d064afff503620003041d0070
041d0042041d004f01d6003f01d6ff7001eaff3b03b6003e03b6003e0415
ffbc0601ffbc056900060437003f0628003f041b004e041f004e042a003f
041d0066041dfff80354004c031d00090654003f06360074039400150394
fff103d2007c05a3004d0377ffd004470070041d007003c0006106360074
06610074044a00570554006503bb0066038b0009038d005105c4003f03cb
ffe5044b004d042a004d04270067036e0000036e0000036e00000000fca5
0000fca5029b00bb029b0051029b006d03b500fa03b5002203b5003f03de
00e20260009b02600056036400dd0361003001ffff950224ffb10224006d
0205004a0585004901ff00ec01ff007f01ff00ff01ff0092035900e90359
0082035900fc0359009501ffff950359ff9802b6007c02b6007902b60096
02b600930419007f0419006e0419009904190088031aff7102dfff9a03af
00e803fc0108031300cc02df00c2027300480273006603fc000503fc001a
073e00a5073e00ba073e00a5073e00ba03fcff5e03fc00e4020500a80205
00b9026d0075026dffdb0274002b0274ffc5028400660284ffe40240006e
0240ffea024a002b024affe4026d0088026dffee0274003e0274ffd80284
00790284fff703fc00f603fc00dc03fc006503fc004504b000bf043d00a0
03fc008103fc009301c400f7033500f7057500000556000007f700000727
0000073c00000727001406ad00c906ad00c9040e00ed05a400d605ac008b
02b6000003fcffef04b3004b040e002c03fc0016040e001f0434001403fc
00cb03fcfff7040e000003fc006604190038040e004a03f30024039f001c
03be0018039f0005039f004a060c006c082d005203fc001a06e000470411
ffff0494005b02cb005e03ec001103ecffde0455ffcf03d7ffd90436007e
03b2004a0436003f04360005040e0040040e005f040e0020040efff4040e
ffcd040effed040e006a040e0077040e002e040efff90443005f028d0059
038100090373001203ac00040368001503b7005d0349005003b5002203bc
0028039f0045039f0055039f0010039f001b039f0014039f001b039f0050
039f0084039f0023039f00220494006a02cb008d03ec001103ec000d0428
000f03d700080436007e03b200790436003f04360033040e004d040e005f
040e0020040e0023040e0018040e001d040e006a040e00a6040e002e040e
0029032100b901f800cc02b0008402ad008102db008302a6008502df00c8
029100bd02e1009f02df009f02ea00c502df00c502d000b401bc00cf01bc
006f0321000101f8001402b0ffcc02adffc902dbffcb02a6ffcd02df0010
0291000502e1ffe702dfffe702ea000d02df000d02d0fffc01bc001701bc
ffb7029d001101f500300252ffe60249ffdd024affd80246ffdf02510004
0238000c0257ffe5024dffee029d009301f500b2025200680249005f024a
005a02460061025100860238008e02570067024d007002b1fee50313fffe
055ffffe0569fffe0517fffe0569fffe052efffd0553fffd05c9005e05c9
005e0567004d05b7004d05a2004d05cd0063057d004c05a2004c052affd4
05b80061084e00610581006307cd005903fc005903fc005f03fc003303fc
003c03fc004903fc004a03fc004703fc005703fc002203fc000303fc0003
03fc000303fc004e05e9002c0405004806d300880443005002edff7103fc
00560484ffe80550000c044efff8066500a10454ffbf0416006c073e009a
073e0096073e00c9073e00c9070e00af070e013a070e00af070e013a0a4e
009a0638009f04660028018a000001da0000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466014f04a1ffca
04a1ffca04a1ffca04a1ffca04a1ffca04a1ffca04a1ffca04a1ffca04a1
ffca04a1ffca04a1ffca04a1ffca03e8005803e8005803e8002003e8fffc
03e8ffe903e8fff203e8fff203e8003c020400150204001f053c0072053c
0072053c0072053c0072053c0072053c0072053c00720584007205840072
05840072058400720584007205840072052200930522009305c6009d05c6
009d05c6009d05c6009d05c6009d05c6009d03e600bf03e6001f03e600bf
041d0051041d0051041dffbb041dff92041dffb8041dffd7041d0051041d
ffeb041dffed041dffed041dffeb041d005103d2004d03d2004d03d20030
03d2ffdb03d2ffa803d2ffd903d2ffcb03d2004d01d6002601d60008041b
004e041b004e041bffe8041bffb7041bffe8041bffea041b004e0483004e
0483004e0483004e0483004e048300490483004e041d0070041d007004bb
007004bb007004bb005904bb007004bb004604bb0070039400150394ffdb
039400150466ffc40466003803f4ffb703f4ffb703f4ffb703f4ffb703f4
ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb7
0380004d0380004d0380fff00380ffb80380ffac0380ffbe0380ffbc0380
001101ec000901ec00130499006004990060049900440499003604990049
049900470499006004db006004db006004db006004db006004db006004db
00600485007d0485007d050d0086050d0086050d0086050d0086050d0067
050d0086037e0086037efff1037e008601da000004660000046600000466
0000046600000466000004660000046600000466000004c1006603de0039
027100210271006a03c4ffbd050d0054050d0054050d0082048600440486
00440486006c03e6007b02ae00270359003701d6ff88043cff3d043cff3d
043cff3d0676ff3d0676ff3d0676ff3d043c001f043c0021043c00210676
0021067600210676002102f5005302e700ba02fb00cb034b00b902a800b9
02a800b8034400d5035b00c201a600c301cb003a02e000c1025b00c8046d
00bc037500bb037500cb02d800c1037500cb02d800c002600073025700ba
031400bf032300ef044500e502fd006502be00da02cf00880000fde20000
fe0004660278046602780466020d0466020d03c1011003c1012e030c0123
030c014b030c0102030c012a023100000231002801ff010b01ff013301ff
012601ff01440000fbf40000fbf402aa001a02aa001a02aa009802aa00ca
01ce001702aa001a02aa001a02aa001a02aa001a027ffff5027f00210324
fee80291fff10466014102aaffa402aaffa30329fed50329fee6030cfed7
030cffe3039afed70327feeb03fcff6003fcff41039aff69039a00000000
ff030000fd7a0000fdf60000fdf60000fdcf0000fdcf0000fd2b0000fd2b
01ce001102aaffb40291002b02aaffa502aa011302aa0113039a014c039a
017e0000fe7e0000fe9c0000fe3b0000fe3b0000fe3a0000fe3a02aa008c
02aa00be03fcff48046600cb02aa0049039a0108039a0126039afce5039a
fd0d039afffa039a002b0401ffbc040100f70000000002aa014002aa0172
01ce00f801ce010c030c00e0030c010802aa004402aa008802aa008803f1
008001ce00f801ce010a01ce000001ce002802aa005003b1002402aa0098
02aa0106075cffb6075c00dd075c0123075c00ba075c00c4075cffa106d0
00d306d00105075c00b1075c00e3075c004001df00be01df00dc01e700d5
01e700f300f800c600f800e4020700d9020700f7020900da020900f8019d
00cc019d00ea020700d0020700ee020900cb020900e9030900cc030900ea
015f00cb015f00e9015200d5015200f301c300df01c300fd01bf009201bf
00b0032700e103270109032700d1032700ef0000ff2103bd0132041a0021
041a003f0416fff20416000f041a0010041a0010041afff7041a00140401
fff3040100100401fffb04010018015fffa701ce00e801ce011303f10080
04c60056044d005904400058042efffe042e007304ff003f055800560422
001403e8002804cc003003ca004303adff3d050c006e048a007602500070
0244003f0428005006ab00960528ff3d053c0072062f0073048e00560458
004e039e001703abfff40404005603e600a3055000640522009303e600bf
03bfffe803ca000503ca004903d7002608b60058081a0058061c00580547
005807b500520712005204a1ffca0204ff3a053c00720522009305220093
05220093052200930522009304a1ffca04a1ffca061bff74050c006e050c
006e04280052053c0072053c007203ca000508b60058081a0058050c006e
0728005104d4000a0528005204a1ffca04a1ffca03e8005803e800580204
ffe502040052053c0072053c007204580052045800520522009305220093
03ca000504fc005205120051040e002303bfffe504a1ffca03e80058053c
0072053c0072053c0072053c007203e6003504a1ff78042eff57035d004c
03e6ff52039400d9045afffb0522002c0495ffcc03e8ff32028dffb8050c
00720458002803e6002e04a1ffca045a0054045a0054045aff92042e0074
04ec005804ec005804ecffc404ec005804ecffbd03e8005803e8005803e8
ff6303e8ff2d03e8005803ad0052050c006e04fc005204fc005204fc0052
04fcff8d04fcffd40204fe160204005204280052042800520428ff9f035d
0058035d0040035dff53035dff4906d7005206d7005206d7005205280052
052800520528fff50528ffee053c0072053c0072053c0072053c00720422
0052042200520458005204580052045800510458ffa6039e0004039e0004
039e0004039e0004039e000403e600a303e600a303e6ff5203e6ff350522
ffeb0522ffb30522ffe40522009305220093048a0070048a00c1071f00db
071f00db0427ffd10427ffd103e600bf03bfffe803bfffe803bfff45035d
003f03c2ff2c043300630458003e05140052045f005103e2ffe804760016
03ad000703b50051041d003d041d003d0434003d0354004c041d00510430
00530271ff3d06230040042ffff903a3003c0241005203b4ffb60434003f
04ee004c041dfff7031d001d02ae007102ae007103b100540329000503a8
000a0361ffbd036800060764005103c0003f0607003f041d005101d6ff57
041b004e041d006c041d0070041d0070041d0070041d007003d20035041d
0051041d00510609002f041d0042041d004203a30019041b004e041b004e
03bcffc001eaff3b07640051041d0042041d003f041d0051041d005103d2
004d03d2004d01d6ffba01d6003f041b004e041b004e02be003f02be003f
041d0070041d007003bcffc0041d003b04a60051040e002a03290005041d
005103d2004d041b004e041b004e041b004e041b004e03940013025ffff4
04a9003d0289001c06660051066400510354ff75031d0034032900050394
009b03d2ffb801eaff3b01eaff3b041d005102beffff03b6000b037200c6
03ec000c02fffff201f3000b0329000b0497008a029b00bb041dffc0041d
003d041d003d041dff640354004c041d0051041d0051041dff72041d0051
041dff7103d2004d03d2004d03d2ff5103d2ff0e03d2004d0271ff3d0271
0021041d0042041d003f041d003f041d003f041dff78041dff7001d6fdfd
01d6fdfd01d6003f03a3003e03a3003e03a3ff6201d6fff501d6ff9d01d6
fe4b01d6fe300654003f0654003f0654003f041d003f041d003f041dff69
041dff62041b004e041b004e041b004e041b004e041dfff8041dfff802be
003f02befff502befff402befeec031d0009031d0009031d0009031d0009
031d000902ae005402ae007102aefee002aefed6041dff70041dff3f041d
ff79041d0070041d00700391ffd70391007c05b8008f05b8008f0377ffd0
0377ffd0039400150329fffc032900050329fef5041dff6a02aeffa605b8
008f03940015041d005101f1ff1a0241003c041dffa002aeff260448003d
03da003d0344000503c2003e0354000102eeffe90319003e053b004c044d
001f03ee004c03e8004903ab000e03e600690477003d04ae001f03f80039
0380001e0465002d038a00410350ff320482006b03ed00520244006b01ec
000203c90046065e007d0479ff3c0499006005bb0060040a001f03e70047
033f001e035bfff80362001e0359008004b100730485007d03a700860369
fff1036b00060393003a0393001607d8004c08850058055a004d05cd0058
06a700460768005203f4ffb701ecff47049900600485007d0485007d0485
007d0485007d0485007d03f4ffb703f4ffb7055cff8b0482006b0482006b
03c900340499006004990060036bffed07ce004c085500580482006b0643
0047046e00160479004603f4ffb703f4ffb70380004d0380004d01ecffd9
01ec0047049900600499006003e7004703e700470485007d0485007d036b
0006047600470496004803bd00290399fff103f4ffb70380004d04990060
049900600499006004990060037e001003f4ff5903abffbc02e000360359
ff65031d00500404fffd0485001e03edffd50380ff5b023effb0048e0060
03e70024037e0027039f001002fcfff801f30007033c00070497006d0260
009b03f4ffb704040049040400490404ff6103ab00690465004c0465004c
0465ffc40465004c0465ffce0380004d0380004d0380ff480380fefd0380
004a035000470482006b0476004704760047047600470476ff850476ff7b
01ecfe0201ec004703c9004703c9004703c9ff6702e0004d02e0ffd902e0
ff1b02e0ff1706060046060600460606004604790046047900460479ffa7
0479ff940499006004990060049900600499006003c2004703c2004703e7
004703e7004703e7003103e7ff7a033f0002033f0002033f0002033f0002
033f000203590080035900800359ff000359fef30485ff9d0485ff620485
ff8e0485007d0485007d03ed001903ed0095061e00a6061e00a603ccffda
03ccffda037e00860369fff10369fff10369ff1a0476ff8c03590000061e
00a6037e006803f4ffb702e0001602e0fe9903c2004703e7003104760047
03c900470399fff103ab000e0350000b03b70047043dff3d043cff3d043c
ff3d043cff3d043cff3d043cff3d043cff3d043cff3d043cff3d043cff3d
0676ff3d0676ff3d0676ff3d0676ff3d0676ff3d0676ff3d0676ff3d0676
ff3d0676ff3d047500710475007104750071047500710475007104750071
04750071047500710475007106d9007106d9007106d9007106d9007106d9
007106d9007106d9007106d9007106d900710684002108be002104ab0021
0683002108bd0021043c001f043c0021043c001f043c0021043c0021044f
0021044f0021043c0021043c0021043c001f043c001f0676001f0676001f
0676001f0676001f0676001f0676001f0676001f0676001f0676001f0676
001f043c001f043c001f0677001f0609001f0843001f043c001f043c001f
0483001f043c001f0676001f04e4001f050a001f050a001f071f001f043c
0021043c0021043c0021043c0021043c001f043c001f043c0021043c001f
043c001f0676001f0676001f0676001f0676001f0676001f0676001f0676
001f0676001f0676001f03d50074041d0051041d0040041d003e03540006
039b004c041d00510434005103b0003003d2003504fc003503a5002f0362
0003044000030426004e01eaff3b041d0042041d00420459004f039d0078
03d0006a041d0070041d003f041d003f01d6fff801d6fff8023200650280
ffd802e7ff3f02e7002601d6002c0486003f06540075065400750654003f
041dff05041d003d044c003f041f004e055d004e054f004e0536004a02be
ffda02beffda02beffda02befff702be002c028e003f028e006f03910028
03ac0030031dffdd01eaff3701eaff3701ea0036028aff3a02ae000b02ae
004a041dffeb047600420449007f0391ffe505b8ffed0394ffe503510073
032900050400000503bcffc003bcfff9039400d9039400ba0394001a0362
000c053c007203d5004a041b002f0459004f0437003f028aff6503a3ffe8
03190045041d005103940068039400ba0657005106ce0051072e005104ed
007103cf0071057a007105f4ff3d04ae006e0469003f03ef004703ef0016
041d005f041d005f03d6ffb9050fff890609002f041200220354004c0434
004104590039033f00420362000301d6ffe60227ffb00391003d02f00014
056900060438003e041b004e0354000604a9005204a800530528000d0684
003503680010041b0059041b004e03a8003f03cafff803ca005b033f0064
0439007a0465000205c7002d066400d403ca008f060e008d034fffef032f
00050349001f03d0ffca02d5003e03d6ffb9042a003f03a8003f052f008c
0415ffbc02f5005303f1005902e700ba02e700a8034b00b902a800b902a8
0089034400d5035b00c201a600c301cb003a02e000c1025b00c8046d00bc
037500bb037500bf037500cb02b200a202d800c102d800c0025700ba0314
00bf044500e502ac009002ac00d402ac009003f400ab02e500b502e500a4
02b800b302b800a1027700a60277008c02e500a10163006a029700a20456
00a602db009e02e600af024e007e02e600b702e600af02e5007b01e300ba
02e900c202db0085045600c0028500c8024a004602be0080024600bc0283
008f036500bb025f00360163ffea01f6ffe902e9000e0285001b02beffd2
0246000d02e5ffd703650007025fff88064f0070049fff9d049f005102d4
ff0606a1000004920002049efe8a031dfef802f4fef80383000902cfff02
0329ff2d03c4ff98030400b203c4ffd30659007101d6fffa0232fffa041d
ff90046d0007046d0007041d003d04420051032dff3d0548004203ef003e
01feffd0067d003f0446003f041d000602befff2037a0009030cff370391
007c03c1ffd0033c0005047c005104bc00510434005103d2004d03a5002f
0362ffd403d2003001d6003f0359ffd70233ff7e047a00700333ffd902e5
00b6024e00a4024e00a402b200b00277008c01c1fff501c1001702d800a7
02e900c20192006701aa00bc016300a10192006701e500330194009b017b
0076022400ac044c00a0044c00c002e6fff902e600a8030400a202e600af
033600980230006e016dffe201e3009602e9007202b8009002e600d102e6
00dd0285004e023700780294007802a600780272005302e600ca02da009f
02da00a0016dffe901f0009e01f0005602030056028b00a403ef00ce0286
008901c400a5033400a501ff00ec01ff007f01ff008c01ce00f801ce010e
029900fa029900e303fc005703fc0022044b004f044b00eb025101770256
000002540000025100d50327feda0254fefb0256fefb0239009802390098
01ce007101ce008802aa008202aa008202aa008202aa008202aa005b02aa
010b026100bf015e009f02300083027c0059029900e30310009603100096
031000960310009603100096045700960457009604570096045700960310
00430457004304570043045700430457004304570043045700430457002f
0457002f0457002f0457002f0457002f0310002f04570025045700250457
002504570025045700250310001a0457001a0457001a0457001a0457001a
0457001a0310004204570042045700420457004204570042045700420457
009604570096045700960457009603100042045700420457004204570042
0457004204570042045700420457002f0457002f0457002f0457002f0457
002f0310002f0457002f0457002f0457002f0457002f0457002f03100026
045700260457002604570026045700260457002603100042045700420457
004204570042045700420457004204570096045700960457009604570096
031000420457004204570042045700420457004204570042031000260457
002604570026045700260457002604570026031000230457002304570023
0457002304570023045700230310002f0457002f0457002f0457002f0457
002f0457002f0310004b0457004b0457004b0457004b0457004b0457004b
045700960457009604570096045700960310004204570042045700420457
004204570042045700420310001a0457001a0457001a0457001a0457001a
0457001a0310002404570024045700240457002404570024045700240310
002f0457002f0457002f0457002f0457002f0457002f0310004e0457004e
0457004e0457004e0457004e0457004e0457009604570096045700960457
009602aa006202aa00620329fefb049a010a0359008202aa004d02aa0035
02aa008002aa0080029100840254ff6403c1007c03c1ff69039afed50224
00b702aa009802aa009802aa009802aa00980440ff860440ff9e03020048
032700ad032700a50324005c02aa00aa071200dd071200a602d8fff202a1
fff202d6fff2027cffa102a1ffe001d9010e01d9010e01d9012801d90128
028901380289013802890177028901770000fd9c0000fdba032901180329
011803290118032901180324010e0324010e032901380329013803290130
032901300324010e0324010e03f4010b03f4010b03f4010b03f4010b0324
00f5032400f503270000030c000001ff011201ff01120329011803290118
03290118032901180329013203290131032901320329013103f400a303f4
005c03f400a303f400490232002a027f002a053c0072042e0073042efffe
042e0073042efffe03e600a00456fec803e6004003ad0051053c00a7045d
00360594005204a2007f042e007304220051043afff7037500560375fff4
0441006c04d7003006840046041200260412ff750354004c035400060354
004c0354ffcf0536004a0378fffa041b004e0399ffef04bcfffa04a2007c
0349005001eaff3b041dff2b04d70030049b006003ab006903ab000e03ab
006903abffda036000540360fe010360fff103500047048e005a03e20021
04f6004703fa005103db006003c2004504a1ffca04a1ff7204a1ff5c04a1
ffca04a1ffca04a1ff9204a1ff7404a1ffca04a1ffca04a1ffca04a1ffca
04a1ffca04a1ffca04a1ffca04a1ff7204a1ff5c04a1ffca04a1ffca04a1
ff9204a1ff7404a1ffca063cffca063cffca063cff72063cff5c063cffca
063cffca063cff92063cff74063cffca03e8ffe504b0ff6604b0ff7103e8
ffff04b0ff8604b0ff8903e8ffaf03e8ffed04fcffe805c9ff6605c5ff71
0560ffad04fc000205c4ff8105c4ff880560ffac04fcffaa04fcffec04fc
005204fcffe805c4ff6105c4ff700560ffad04fc000205c4ff8105c4ff88
0560ffac06b1005206b1ffe80779ff610779ff700715ffad06b100020779
ff810779ff880715ffac0204ffe702ccff6502ccff700268ffac02040001
02ccff8502ccff880268ffab0204ffaa0204ffec0204ff440204ff78053c
ffed0604ff870604ff71053c00070604ffa70604ff89053cffd0053cffed
0422000203e6ffad0512ff950512ffa904aeffbb03e6ff5a03e6ffa903e6
002203e6004d0550ffed0613ff870611ff7105b4ffb2055000070613ffa7
0611ff8905b4ffb10550ffd50550fff40550000c0550ffed0613ff870611
ff7105b4ffb2055000070613ffa70611ff8905b4ffb106f6000c06f6ffed
07b9ff8707b7ff71075affb206f6000707b9ffa707b7ff89075affb10485
005104850051048500510485005104850051048500510485005104850051
048500510485005104850051048500510485005104850051048500510485
005104850051048500510485005104850051048500510485005104850051
048500510485005103a5002f03a5002f03a5002f03a5002f03a5002f03a5
002f03a5002f03a5002f0434003f0434003f0434003f0434003f0434003f
0434003f0434003f0434003f0434003f0434003f0434002b0434001f0434
001f0434001f0434001f0434001f0434001f0434001f0434001f0434001f
0434001f0434001f0434001f023200650232006502320065023200650232
00650232006502320065023200650232feef0232fffa0232004e02320065
023200650232ff180232ff4e0232ff5d041b004e041b004e041b004e041b
004e041b004e041b004e041b004e041b004e0412ffd30412ffd304550075
045500750455007504550075045500750455007504550075045500750455
007504550075045500750455007504550075045500750455007504550075
059200560592005605920056059200560592005605920056059200560592
005605920056059200560592005605920056059200560592005605920056
059200560592005605920056059200560592005605920056059200560592
005603f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb7
03f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4
ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb703f4ffb7
0570ffb70570ffb70570ffb70570ffb70570ffb70570ffb70570ffb70570
ffb70570ffb70380004d0380004d0380004d0380004d0380004d0380004d
0380004d0380004d04760047047600470476004704760047047600470476
004704760047047600470476004704760047047600470476004704760047
0476004704760047047600470476004704760047047600470476004705e4
004705e4004705e4004705e4004705e4004705e4004705e4004705e40047
05e4004701ec004701ec004701ec004701ec004701ec004701ec004701ec
004701ec004701ecff1001ecfff401ec004701ec004701ec004701ec0031
01ecff5301ecff7004990060049900600499006004990060049900600499
0060049900600499006003c2004703c20047037e008603600054037e0086
03600054037e008603600054037e008603600054037e008603600054037e
008603600054037e008603600054037e008603600054037e008603600054
037e008603600054037e008603600054037e00130360ffec037e00260360
ffff04b1001204b1001204b1001204b1001204b1001204b1001204b10012
04b1001204b1001204b1001204b1001204b1001204b1001204b1001204b1
001204b1001204b1001204b1001204b1001204b100120629001206290012
0629001206290012062900120629001206290012062900120629001204a1
ffca04a1ffca04a1ff7204a1ff5c04a1ffca04a1ffca04a1ff9204a1ff74
04a1ffca04fc005204fcffe805c9ff6605c5ff71055fffac04fc000205c4
ff8105c4ff880560ffac0550000c0550ffed0613ff870611ff7105b4ffb2
055000070613ffa70611ff8905b4ffb1068dffca0665ffc90665ff720665
ff5c0665ffca0665ffca0665ff920665ff740665ffca06c6005206c6ffe8
0793ff66078fff710729ffac06c60002078eff81078eff88072affac071a
000c071affed07ddff8707dbff71077effb2071a000707ddffa707dbff89
077effb101d9010e01d901280289013802890177039a0107032901180329
01180324010e03290138032901300324010e03f4010b03f4010b032400f5
01d9010e03270118030c012f027f002101c4004401c4004d01c400430522
005004400059042200520370002a0441005106a4ffff03ca000304940051
045800520458005204fc00a10514005205b10051073600510519006f042e
007303e600a303e600bf03e6005d0470ffca05b4009e048900be047200be
0472005105b3006705b30067020400520668ffff04580051050effae04fc
005104fc0051047200be0707005104a1ffca04a1ffca061bff7403e80051
04cc003004cc00300668ffff03ca000303ca00050522005205220052053c
0072053c0072053c00720462001e04380049043800490438004904720063
03700050061800580370ffec0470ffca0427ffd10422004206410042063a
00de043900de06e4ffae071b0051050c006e051400a303ca0043050effae
041d007003d9006e041dfff802d5ffee039f003f064afff50362000303f4
003d03b6003e03b6003e04440057045e003f04d8003f05f1003d0447004d
0354004c0677003c039d008f039d003903b2ffc70447003d03e5006103c0
006103c0003d04a7004004a70040064afff503cf003d0421ffbc0437003f
043e003f03c000610569000702040052041d0049041d00510609002f03d2
003603d2003003d2002a064afff50362fff203bcffc0041d0070041d006b
041b004e041f004e041f004e038bfff403940013039400140394001503c0
00140349001f0554006502d5ffd303b2ffc90377ffd0041d0051062e0051
059b009d03be009d061affbc0648003f0459004f0481005403a5002f042b
ffbc0489004703e8004903c200470314003703cc004805b0ffeb0380000e
03dd004603c8004503c800460426005204a4004704e10047064b004504a2
005703ab006903590080037e0086037e006b03e9ffda04cf001d03fa009a
03fa009a0409004704c6002b04c6002b01ec00470578ffeb03c800450457
ffa9047600460499004703fa009a0625004603f4ffb703f4ffb7055cff8b
03800042043b002c043b002c0578ffeb03800003036b0006048900470489
004704990060049b0060049b006003e4001e039d002a039d0036039d0026
03fa004403140047058300490314ffe903f2ffda03ccffda03e600260576
0022050c00820367008205c1ffa9060c00470496006b044f0080036d0032
0474ffa90400000008000000040000000800000002af0000020000000155
00000450000001bc00000199000001000000000000000000ffdc0000ff25
040e0025040e002b040e001303fcff5e01ff008c0358008801c400a50334
00a504a400a5047600bb03fcfff40273000d04ee0085042e0073042e0073
03ad0004040e000b0654003f05280028074d005406350054071f002805f5
00550428003803e600a308a80028043affae0482004404b2007a0495ffcc
03ad0029042e00730621006c0621006e057800e6059d00e603fc001b0701
00bc03fc003d045201d7045200be0400fff6040001bd040001bd0400fff6
040001bd0400fff607090099045c00a9047200510438005204d0ffe70562
008d03c900600654006d042f00640418ffba03500034040bffe004410068
0326ffdb032700a80327009f032700bd0254016f0254018d025401540254
017202aa002e02aa004c04e0007307f4000a07e2001407980003076c0072
063a0051050bffc906a7005105c80004073f005103caffbb060000bf04b7
00c208360072053c0072076c0072076c0072042e00730566007c0500003e
0433ffc405af003e0480ffc2060b003e0362ffbe05a9007c03d200610745
004e041b004e0642004e0566007c0354004c06a9006005be0047045affb1
05df004704edffd7065500470380ffe30558009b03fd009507f10060051b
006006a8006006a9006003ad006903c7009602aa00d0045a00550000ffdc
0000fe5101cf00000224001401c70000016200a202b1fee50aa000dc04d5
009202d5008302d5008304d500b202d500700aa000dc0aa000dc0aa000dc
0aa000dc0aa000dc0aa000dc0aa000dc0aa000dc0aa000dc0000fd230000
009f0000fdf30000009f00000000039a010e039a01470324011803240118
03240154039a010e0324011803240154025600e4032901380329015c03bd
013202aa004c0550020d027f006a03240154039a01470256008e00000022
00000049000000490000003f032401550324011703240155032401170324
0155032401170324015503240117032400b503240095000000780000007e
0000013800000111039a010e039a01470346012b0000002403c100a5030f
01000346012b0346012b039a011e0348012b0348012b03a2011e03a2011e
027500ed035f014b000000750000007b0000003600000075000000750000
00750000009b0000009b0512ff790512ff9604aeff9f03e6ff2f03e6ff96
03e6003e03e6005603f4ffb703f4ffb703f4ffb70570ffb70570ffb70570
ffb704760047047600470476004705e4004705e4004705e40047037e0086
037e0086037e008604b1001204b1001204b1001206290012062900120629
00120000fd310000fd23018afd810000fd590000fc150000fc270000fbee
0000fc210000fc150000fc270000fc160000fc1f0000fc3d0000fc010000
fc490000fc110000fc4a0000fc0b0000fc3b0000fc000000fd4a0000fd02
0000fd020000fe890000fec60000fe140000fe4e0000fce30000fd290000
fde30000fe200000fdbb0000fdf70000fd4f0000fd8f0000fe640000fea0
0000fe6b0000fea70000fcdd0000fcdd0000fe1e0000fe690000fd200000
fcdd0000fcde0000fcde0000fcda0000fc860000fd7a0000fb960000fce9
0000fd500000fc780000fc760000fb890000fb7c0000fb8f0000fc950000
fb470000fb8d0000fba40000fb8b0000fbdb0000fca10000fd690000fc75
0000fce40000fc7b0000fe120000fe4c0000fe730000fea50000fd840000
fdbd0000fb8b0000fcda0000fcfc0000fd800000fdbe0000fda40000fdd5
0000fc7d0000fcb60000fbc80000fcf90000fe580000fe8f0000fe600000
fe990000fd970000fdd00000fcf20000fd2d0000fd2d0000fc670000fe5b
0000fe960000fd560000fd8d0000fcff0000fc600000fe2d0000fe650000
fa350000fb5c0000fb940000fb4d0000fb890000fa340000fbac0000fbe0
0000fb5c0000fb970000fa3f0000fe090000fe480000fe1b0000fe570000
fe8a0000fec40000fe0e0000fe4e0000fe100000fe4b0000fe2d0000fe6c
0000fe060000fe430000fe200000fe5e0000fd8d0000fdcd0000fe420000
fe7c0000fe5c0000fe9a0000fe1f0000fe5e0000fdf70000fe350000fd9a
0000fdd80000fd990000fdd60000fd7b0000fcaf0000fcd70000fbc60000
fbee0000fccd0000fcf50000fbe50000fc0d0000fc520000fc7a0000fc49
0000fc710000fd140000fe470000fe800000fc670000fe670000fe850000
fe6d0000fe8b0000fe370000fe550000fe7d0000fe9b0000fc6e0000fc8c
0000fdb30000fdd10000fddb0000fdf90000fda40000fdc20000fdc50000
fde30000fde50000fe030000fda40000fdc20000fd650000fd830000fd65
0000fd830000fd900000fdae0000fca50000fca00000fe500000fe640000
fda60000fdea0000fdbf0000fdee0000fddb0000fe040000fde40000fe10
0000fcfa0000fcb30000fcfa0000fcb40000fd470000fd470000fd520000
fd5d0000fd7b0000fe730000fe910000fe620000fe800000fd1f0000fd3d
03e6ff8a03600054036000540360005401d6fff803c4ff5c03c4ffbd03c4
ffbd03c4ffbd043cff3d0677ff3d0aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b4047d0048040e0070
00650015002f000000>
<000000000000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
000001500000015000000150000001500000015000000150000001500000
015000000150000001500000015000000150000001500000015000000150
0000015000000150000001500000015000000150000100000f6d01200010
00e1000700020010002f0060000009ed1102000400010000000e00ae0000
000300000000006400000000000300000007007600640001000000000000
003200da00010000000000030015010c0001000000000004001501210001
000000000006001501360001000000000007003b014b0003000104090000
006401860003000104090001002a01ea0003000104090002000e02140003
000104090003002a02220003000104090004002a024c0003000104090006
002a02760003000104090007007602a000a9002000320030003100340020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006100200074007200610064
0065006d00610072006b0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000670072006f007500700020006f
006600200063006f006d00700061006e006900650073002ea92032303134
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e4c4e585958572b43616c696272692d49
74616c69634c4e585958572b43616c696272692d4974616c69634c4e5859
58572b43616c696272692d4974616c696343616c69627269206973206120
74726164656d61726b206f6620746865204d6963726f736f66742067726f
7570206f6620636f6d70616e6965732e00a9002000320030003100340020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e004c004e
0058005900580057002b00430061006c0069006200720069002d00490074
0061006c006900630052006500670075006c00610072004c004e00580059
00580057002b00430061006c0069006200720069002d004900740061006c
00690063004c004e0058005900580057002b00430061006c006900620072
0069002d004900740061006c00690063004c004e0058005900580057002b
00430061006c0069006200720069002d004900740061006c006900630043
0061006c0069006200720069002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200074006800650020004d
006900630072006f0073006f00660074002000670072006f007500700020
006f006600200063006f006d00700061006e006900650073002eb10903b8
027ab21e3e1fb80279b21e3e1fb80278b21e0b1fb80277b21e0b1fb80276
b21e3a1fb80275b21e3a1fb80274b21e3e1fb80273b21e3b1fb80272b21e
3c1fb80271b21e3c1fb80270b21e3c1fb8026fb21e3d1fb8026eb21e3d1f
b8026db21e3e1fb8026cb21e3e1fb8026bb21d411fb8026ab21d411fb802
69b21d421fb80268b21d431fb80267b21d431fb80266b21d431fb80265b2
1d431fb80264b21d431fb80263b21d411fb80262b21d421fb80261b21d42
1fb80260b21d431fb8025fb21d431fb8025eb21c451fb8025db21c451fb8
025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451fb80258
b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb80254b21c
451fb80252b21c451fb80251b21c451fb80250b21c451fb8024fb21c451f
b8024eb21c441fb8024db21c451fb8024cb21c451fb8024bb21c451fb802
4ab21c451fb80249b21c451fb80248b21c451fb80247b21c451fb80246b2
1c451fb80245b21c451fb80244b21b491fb80243b21b4a1fb80242b21b4a
1fb80241b21b4a1fb80240b21b4b1fb8023fb21b4b1fb8023eb21b4c1fb8
023db21b4c1fb8023cb21b4c1fb8023bb21b4c1fb8023ab21b4c1fb80253
b21b4c1fb80239b21b491fb80238b21b491fb80237b21b4a1fb80236b21b
4a1fb80235b21b4a1fb80234b21b4b1fb80233b21b4b1fb80232b21b4c1f
b80231b21b4c1fb80230b21b4c1fb8022fb21b4c1fb8022eb21b4c1fb802
2db21b491fb8022cb21b4a1fb8022bb21b4b1fb8022ab21b4c1fb80229b2
1b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225b21b4a
1fb80224b21b4a1fb80223b21b4b1fb80222b21b4c1fb80221b21b4c1fb8
0220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21a4e1fb8021c
b21a4e1fb8021bb21a4f1fb8021ab21a4f1fb80219b21a4f1fb80218b21a
4e1fb80217b21a4e1fb80216b21a4f1fb80215b21a4f1fb80214b21a4f1f
b80213b21a4e1fb80212b21a4e1fb80211b21a4f1fb80210b21a4e1fb802
0fb21a4e1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4f1fb8020bb2
1a4f1fb8020ab21a4f1fb80209b219501fb80208b219511fb80207b21951
1fb80206b219511fb80205b219511fb80204b219501fb80203b219511fb8
0202b219511fb80201b219511fb80200b219511fb801ffb219511fb801fe
b219511fb801fdb219501fb801fcb219511fb801fbb219511fb801fab219
511fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b218531f
b801f5b218531fb801f4b218541fb801f3b218541fb801f2b218541fb801
f1b218541fb801f0b218531fb801efb218531fb801eeb218541fb801edb2
18541fb801ecb218541fb801ebb218541fb801eab218531fb801e9b21853
1fb801e8b218531fb801e7b218541fb801e6b218541fb801e5b218541fb8
01e4b218541fb801e3b218531fb801e2b218531fb801e1b218541fb801e0
b218541fb801dfb218541fb801deb218541fb801ddb217561fb801dcb217
561fb801dbb217571fb801dab217571fb801d9b217561fb801d8b217561f
b801d7b217571fb801d6b217571fb801d5b217571fb801d4b217571fb801
d3b217561fb801d2b217571fb801d1b217561fb801d0b217561fb801cfb2
17571fb801ceb217571fb801cdb217571fb801ccb217571fb801cbb21757
1fb801cab217561fb801c9b217561fb801c8b217571fb801c7b217571fb8
01c6b217571fb801c5b217571fb801c4b2163e1fb801c3b2163f1fb801c2
b2163f1fb801c1b2165b1fb801c0b2165b1fb801bfb2165b1fb801beb216
5b1fb801bdb2165b1fb801bcb2165b1fb801bbb2165b1fb801bab2163f1f
b801b9b2163f1fb801b8b2165b1fb801b7b2165b1fb801b6b2165b1fb801
b5b2165b1fb801b4b2165b1fb801b3b2165b1fb801b2b2165b1fb801b1b2
163f1fb801b0b2163e1fb801afb2163f1fb801aeb2163f1fb801adb2165b
1fb801acb2165b1fb801abb2165b1fb801aab2165b1fb801a9b2165b1fb8
01a8b2163e1fb801a7b2163f1fb801a6b2165b1fb801a5b2165b1fb801a4
b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b216
5b1fb8019fb2165b1fb8019eb215621fb8019db215621fb8019cb215631f
b8019bb215641fb8019ab215651fb80199b215661fb80198b215661fb801
97b215661fb80196b215661fb80195b215661fb80194b215661fb80193b2
15661fb80192b215611fb80191b215621fb80190b215631fb8018fb21564
1fb8018eb215641fb8018db215651fb8018cb215661fb8018bb215661fb8
018ab215631fb80189b215641fb80188b215551fb80187b215611fb80186
b215621fb80185b215621fb80184b215631fb80183b215651fb80182b215
661fb80181b215661fb80180b215661fb8017fb215661fb8017eb215661f
b8017db215661fb8017cb215661fb8017bb215661fb8017ab215451fb801
79b215611fb80178b215621fb80177b215621fb80176b215631fb80175b2
15641fb80174b215641fb80173b215651fb80172b215661fb80171b21566
1fb80170b215661fb8016fb215661fb8016eb215661fb8016db215661fb8
016cb215661fb8016bb215551fb8016ab215451fb80169b215451fb80168
b215361fb80167b215361fb80166b214821fb80165b214561fb80164b214
7f1fb80163b214551fb80162b214561fb80161b214401fb80160b214551f
b8015fb214561fb8015eb2147e1fb8015db214831fb8015cb214851fb801
5bb2133d1fb8015ab2131e1fb80159b2131e1fb80158b2130a1fb80157b2
130a1fb80156b2130b1fb80155b2133a1fb80154b2133a1fb80153b2133a
1fb80152b2133b1fb80151b2133c1fb80150b2133c1fb8014fb212451fb8
014eb212461fb8014db212461fb8014cb212451fb8014bb212451fb8014a
b212461fb80149b212461fb80148b212461fb80147b212441fb80146b212
451fb80145b212461fb80144b212461fb80143b211471fb80142b211571f
b80141b211581fb80140b211591fb8013fb2115a1fb8013eb2115a1fb801
3db2115b1fb8013cb2115b1fb8013bb2115b1fb8013ab2115b1fb80139b2
112b1fb80138b2112c1fb80137b211391fb80136b211391fb80135b21146
1fb80134b211471fb80133b211471fb80132b211551fb80131b211551fb8
0130b211561fb8012fb211561fb8012eb211571fb8012db211571fb8012c
b211581fb8012bb211591fb8012ab211591fb80129b2115a1fb80128b211
5a1fb80127b2115b1fb80126b2115b1fb80125b2115b1fb80124b2115b1f
b80123b211591fb80122b2115a1fb80121b211391fb80120b211471fb801
1fb211561fb8011eb211561fb8011db211591fb8011cb211591fb8011bb2
115b1fb8011ab2115b1fb80119b2115b1fb80118b211561fb80117b21156
1fb80116b211571fb80115b211571fb80114b211581fb80113b2115a1fb8
0112b2115a1fb80111b2115b1fb80110b2115b1fb8010fb2115b1fb8010e
b2115b1fb8010db2115a1fb8010cb2115b1fb8010bb2105d1fb8010ab210
5e1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2105f1f
b80105b2105d1fb80104b2105e1fb80103b2105f1fb80102b2105f1fb801
01b2105f1fb8010040ff105f1fff105d1ffe105f1ffd105f1ffc105f1ffb
105f1ffa105d1ff9105e1ff8105f1ff7105f1ff6105f1ff5105f1ff40f62
1ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f621fec
0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60f621fe50f62
1fe40f641fe30f621fe20f621fe10f631fe00f641fdf0f641fde0f641fdd
0f641fdc0f641fdb0f641fda0e671fd90e681fd80e681fd70e681fd60e68
1fd50e671fd40e681fd30e681fd20e681fd10e671fd00e681fcf0e681fce
0e681fcd0e681fcc0e681fcb0e681fca0e681fc90e681fc80d6b1fc70d6c
1fc60d2a1fc50d6c1fc40d2c1fc30d6b1fc20d6c1fc10d6d1f40ffc00d6a
1fbf0d691fbe0d681fbd0d6b1fbc0d311fbb0d311fba0d311fb90c711fb8
0c721fb70c731fb60c741fb50c741fb40c741fb30c731fb20c741fb10d31
1fb00d311faf0d311fae0d311fad0d311fac0d311fab0d311faa0d311fa9
0b7e1fa80b7a1fa70b791fa60b7a1fa50b7c1fa40b7d1fa30b7e1fa20b7e
1fa10b7e1fa00b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b0b7e1f9a
0b2d1f990b2d1f980aa71f970aa51f960aa71f950aa71f940aa71f930aa7
1f920a681f910a821f900a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c0aa71f85
03251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d01
0b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a557955775578ab
7755ba028900660288403c5576ab755504751475747503f47501ab750144
750130750102007510752075030c7455725573ab7255007250728072b072
043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d10467155
6f5570ab6f556e666d556a03251f6938675568ab67556638645565ab6455
63386255613860555f385d555eab5d555c385a555bab5a55593858555703
251f5638545555ab54555338515552ab51554f384e554e03251f4d384b55
4cab4b554a38485549ab4855473846554503381f001c101c201c0310b8ff
c0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03120f1a
1f1a02290f1901434f19016f197f198f19030f18cf18024018292c460f17
cf17df17ef1704134017292e460016101620160315b8ffc0b3164d5446b8
ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f15010f151f
1502451f15010011e011f0110315bf10cf10020f0f010f0fff0f02400f31
35460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f0d1f0dff0d
0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f0b02400b3f
4346400b2d30460003012001010001100120010308b8ffc0b301151f46b8
0100b316010501b80190b154532b2b4bb807ff524bb008505bb00188b025
53b00188b040515ab00688b000555a5b58b101018e59b101024354b0144b
515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0805358b040
1d594bb0ff5358b0001db1160042592b5e7375732b2b745e732b2b5e7374
2b73742b7374745e7301755e73742b2b2b2b5e732b5e732b7374755e735e
735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b
2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e
000000>
[337 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> QJJAAA+Calibri-Italic AddT42Char 
2 0 0 <00050000fe7303da050e00030007003b00550056004fb52d162d16083c41
0a01ed00490007016400020020018c000800010164401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103dafc5b03
4ffd06027b1f456e4e24021f1b0e140c050120051f17083d4f2e130f2135
2828402f1f070a060205080608293a4422445e3a1afeb503070b070a2016
161a0e0504070c0809201913190e04fe46050efaf2050efb43046cfb9403
313467523605980a0802040606bc1b17253b4621192b20130f13100c0e05
131612060713120b263d4afd8b08171a17070a0a070c100a091818160809
0a060c10fd38>QJJAAA+Calibri-Italic AddT42Char 
QJJAAA+Calibri-Italic /CharStrings get begin
/space 3 def
end
QJJAAA+Calibri-Italic /Encoding get
dup 32 /space put
pop
end
%ADOEndSubsetFont
/FHSKMD+Calibri-Italic /QJJAAA+Calibri-Italic findfont ct_VMDictPut
/FHSKMD+Calibri-Italic*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
FHSKMD+Calibri-Italic nf
FHSKMD+Calibri-Italic*1 [18 0 0 -18 0 0 ]msf
203.96 169.194 mo
( )sh
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
333.84 169.194 mo
(\007\026)sh
FHSKMB+CambriaMath [13.2 0 0 -13.2 0 0 ]msf
345 172.914 mo
(\010\330)sh
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
360.72 169.194 mo
(=)sh
430.165 116.706 mo
432.591 117.128 434.324 118.571 435.364 121.035 cv
436.277 123.197 436.789 126.286 436.9 130.302 cv
436.924 130.302 li
436.924 132.034 li
436.924 139.074 li
436.924 143.48 li
436.924 152.274 li
436.924 155.424 li
436.924 158.114 437.258 160.135 437.926 161.489 cv
438.594 162.842 439.511 163.542 440.677 163.589 cv
440.677 164.644 li
439.487 164.691 438.564 165.388 437.908 166.736 cv
437.252 168.083 436.924 170.081 436.924 172.73 cv
436.924 175.902 li
436.924 184.674 li
436.924 189.066 li
436.924 196.106 li
436.924 197.874 li
436.899 197.874 li
436.786 201.872 436.274 204.949 435.364 207.106 cv
434.324 209.569 432.591 211.012 430.165 211.434 cv
430.165 210.599 li
431.882 210.195 433.13 208.836 433.909 206.521 cv
434.688 204.207 435.078 200.635 435.078 195.807 cv
435.078 189.066 li
435.078 184.674 li
435.078 175.902 li
435.078 174.259 li
435.172 170.837 435.616 168.391 436.41 166.92 cv
437.204 165.45 438.014 164.538 438.84 164.187 cv
438.84 163.967 li
438.002 163.621 437.165 162.672 436.331 161.119 cv
435.496 159.567 435.078 157.159 435.078 153.895 cv
435.078 152.274 li
435.078 143.48 li
435.078 139.074 li
435.078 132.333 li
435.078 127.505 434.688 123.934 433.909 121.619 cv
433.13 119.305 431.882 117.945 430.165 117.541 cv
cp
391.197 116.706 mo
391.197 117.541 li
389.48 117.945 388.232 119.305 387.453 121.619 cv
386.673 123.934 386.284 127.505 386.284 132.333 cv
386.284 139.074 li
386.284 143.48 li
386.284 152.274 li
386.284 153.895 li
386.284 157.159 385.866 159.567 385.031 161.119 cv
384.196 162.672 383.36 163.621 382.522 163.967 cv
382.522 164.187 li
383.348 164.538 384.158 165.45 384.952 166.92 cv
385.746 168.391 386.19 170.837 386.284 174.259 cv
386.284 175.902 li
386.284 184.674 li
386.284 189.04 li
386.284 195.781 li
386.284 200.609 386.673 204.18 387.453 206.495 cv
388.232 208.809 389.48 210.169 391.197 210.573 cv
391.197 211.408 li
388.771 210.986 387.038 209.543 385.998 207.079 cv
385.09 204.928 384.578 201.859 384.463 197.874 cv
384.438 197.874 li
384.438 196.08 li
384.438 189.04 li
384.438 184.674 li
384.438 175.902 li
384.438 172.73 li
384.438 170.081 384.11 168.083 383.454 166.736 cv
382.797 165.388 381.875 164.691 380.685 164.644 cv
380.685 163.589 li
381.851 163.542 382.768 162.842 383.436 161.489 cv
384.104 160.135 384.438 158.114 384.438 155.424 cv
384.438 152.274 li
384.438 143.48 li
384.438 139.074 li
384.438 132.034 li
384.438 130.302 li
384.462 130.302 li
384.573 126.286 385.085 123.197 385.998 121.035 cv
387.038 118.571 388.771 117.128 391.197 116.706 cv
f
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
391.56 149.154 mo
(\015F)sh
418.635 119.618 mo
420.876 119.618 li
420.876 119.634 li
429.84 119.634 li
429.84 120.834 li
419.88 120.834 li
419.88 120.787 li
419.285 120.787 li
414.557 136.941 li
413.704 136.941 li
410.066 129.119 li
408.58 129.778 li
408.308 129.119 li
411.191 127.801 li
414.293 134.621 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
419.88 135.474 mo
(2)sh
413.886 161.16 mo
(2)sh
408 143.394 mo
429.84 143.394 li
429.84 144.594 li
408 144.594 li
cp
ef
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
391.56 197.634 mo
(\015F)sh
418.635 168.098 mo
420.876 168.098 li
420.876 168.114 li
429.84 168.114 li
429.84 169.314 li
419.88 169.314 li
419.88 169.267 li
419.285 169.267 li
414.557 185.421 li
413.704 185.421 li
410.066 177.599 li
408.58 178.258 li
408.308 177.599 li
411.191 176.281 li
414.293 183.101 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
419.88 183.954 mo
(2)sh
413.886 209.64 mo
(2)sh
408 191.874 mo
429.84 191.874 li
429.84 193.074 li
408 193.074 li
cp
ef
FHSKMD+Calibri-Italic*1 [18 0 0 -18 0 0 ]msf
442.2 169.194 mo
( )sh
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
96.6731 382.8 mo
(\007\026)sh
FHSKMB+CambriaMath [13.2 0 0 -13.2 0 0 ]msf
107.833 386.52 mo
(\010\330)sh
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
123.553 382.8 mo
(=)sh
192.998 330.312 mo
195.424 330.734 197.157 332.177 198.197 334.641 cv
199.11 336.803 199.622 339.892 199.733 343.908 cv
199.757 343.908 li
199.757 345.64 li
199.757 352.68 li
199.757 357.086 li
199.757 365.88 li
199.757 369.03 li
199.757 371.72 200.091 373.741 200.759 375.095 cv
201.427 376.448 202.344 377.148 203.51 377.195 cv
203.51 378.25 li
202.32 378.297 201.397 378.994 200.741 380.342 cv
200.085 381.689 199.757 383.687 199.757 386.336 cv
199.757 389.507 li
199.757 398.28 li
199.757 402.672 li
199.757 409.712 li
199.757 411.48 li
199.732 411.48 li
199.619 415.478 199.107 418.555 198.197 420.712 cv
197.157 423.175 195.424 424.618 192.998 425.04 cv
192.998 424.205 li
194.715 423.801 195.963 422.442 196.742 420.127 cv
197.521 417.813 197.911 414.241 197.911 409.413 cv
197.911 402.672 li
197.911 398.28 li
197.911 389.507 li
197.911 387.865 li
198.005 384.443 198.449 381.997 199.243 380.526 cv
200.037 379.056 200.847 378.144 201.673 377.793 cv
201.673 377.573 li
200.835 377.227 199.998 376.278 199.164 374.725 cv
198.329 373.173 197.911 370.765 197.911 367.501 cv
197.911 365.88 li
197.911 357.086 li
197.911 352.68 li
197.911 345.939 li
197.911 341.111 197.521 337.54 196.742 335.225 cv
195.963 332.911 194.715 331.551 192.998 331.147 cv
cp
154.03 330.312 mo
154.03 331.147 li
152.313 331.551 151.065 332.911 150.286 335.225 cv
149.506 337.54 149.117 341.111 149.117 345.939 cv
149.117 352.68 li
149.117 357.086 li
149.117 365.88 li
149.117 367.501 li
149.117 370.765 148.699 373.173 147.864 374.725 cv
147.029 376.278 146.193 377.227 145.355 377.573 cv
145.355 377.793 li
146.181 378.144 146.991 379.056 147.785 380.526 cv
148.579 381.997 149.023 384.443 149.117 387.865 cv
149.117 389.507 li
149.117 398.28 li
149.117 402.646 li
149.117 409.387 li
149.117 414.215 149.506 417.786 150.286 420.101 cv
151.065 422.415 152.313 423.775 154.03 424.179 cv
154.03 425.014 li
151.604 424.592 149.871 423.149 148.831 420.685 cv
147.923 418.534 147.411 415.465 147.296 411.48 cv
147.271 411.48 li
147.271 409.686 li
147.271 402.646 li
147.271 398.28 li
147.271 389.507 li
147.271 386.336 li
147.271 383.687 146.943 381.689 146.287 380.342 cv
145.63 378.994 144.708 378.297 143.518 378.25 cv
143.518 377.195 li
144.684 377.148 145.601 376.448 146.269 375.095 cv
146.937 373.741 147.271 371.72 147.271 369.03 cv
147.271 365.88 li
147.271 357.086 li
147.271 352.68 li
147.271 345.64 li
147.271 343.908 li
147.295 343.908 li
147.406 339.892 147.918 336.803 148.831 334.641 cv
149.871 332.177 151.604 330.734 154.03 330.312 cv
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
154.393 362.76 mo
(+)sh
181.468 333.224 mo
183.709 333.224 li
183.709 333.24 li
192.673 333.24 li
192.673 334.44 li
182.713 334.44 li
182.713 334.393 li
182.118 334.393 li
177.39 350.547 li
176.537 350.547 li
172.899 342.725 li
171.413 343.384 li
171.141 342.725 li
174.024 341.407 li
177.126 348.227 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
182.713 349.08 mo
(2)sh
176.719 374.766 mo
(2)sh
170.833 357 mo
192.673 357 li
192.673 358.2 li
170.833 358.2 li
cp
ef
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
154.393 411.24 mo
(+)sh
181.468 381.704 mo
183.709 381.704 li
183.709 381.72 li
192.673 381.72 li
192.673 382.92 li
182.713 382.92 li
182.713 382.873 li
182.118 382.873 li
177.39 399.027 li
176.537 399.027 li
172.899 391.205 li
171.413 391.864 li
171.141 391.205 li
174.024 389.887 li
177.126 396.707 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
182.713 397.56 mo
(2)sh
176.719 423.246 mo
(2)sh
170.833 405.48 mo
192.673 405.48 li
192.673 406.68 li
170.833 406.68 li
cp
ef
FHSKMD+Calibri-Italic*1 [18 0 0 -18 0 0 ]msf
205.033 382.8 mo
( )sh
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
333.84 382.8 mo
(\007\026)sh
FHSKMB+CambriaMath [13.2 0 0 -13.2 0 0 ]msf
345 386.52 mo
(\010\330)sh
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
360.72 382.8 mo
(=)sh
430.165 330.312 mo
432.591 330.734 434.324 332.177 435.364 334.641 cv
436.277 336.803 436.789 339.892 436.9 343.908 cv
436.924 343.908 li
436.924 345.64 li
436.924 352.68 li
436.924 357.086 li
436.924 365.88 li
436.924 369.03 li
436.924 371.72 437.258 373.741 437.926 375.095 cv
438.594 376.448 439.511 377.148 440.677 377.195 cv
440.677 378.25 li
439.487 378.297 438.564 378.994 437.908 380.342 cv
437.252 381.689 436.924 383.687 436.924 386.336 cv
436.924 389.507 li
436.924 398.28 li
436.924 402.672 li
436.924 409.712 li
436.924 411.48 li
436.899 411.48 li
436.786 415.478 436.274 418.555 435.364 420.712 cv
434.324 423.175 432.591 424.618 430.165 425.04 cv
430.165 424.205 li
431.882 423.801 433.13 422.442 433.909 420.127 cv
434.688 417.813 435.078 414.241 435.078 409.413 cv
435.078 402.672 li
435.078 398.28 li
435.078 389.507 li
435.078 387.865 li
435.172 384.443 435.616 381.997 436.41 380.526 cv
437.204 379.056 438.014 378.144 438.84 377.793 cv
438.84 377.573 li
438.002 377.227 437.165 376.278 436.331 374.725 cv
435.496 373.173 435.078 370.765 435.078 367.501 cv
435.078 365.88 li
435.078 357.086 li
435.078 352.68 li
435.078 345.939 li
435.078 341.111 434.688 337.54 433.909 335.225 cv
433.13 332.911 431.882 331.551 430.165 331.147 cv
cp
391.197 330.312 mo
391.197 331.147 li
389.48 331.551 388.232 332.911 387.453 335.225 cv
386.673 337.54 386.284 341.111 386.284 345.939 cv
386.284 352.68 li
386.284 357.086 li
386.284 365.88 li
386.284 367.501 li
386.284 370.765 385.866 373.173 385.031 374.725 cv
384.196 376.278 383.36 377.227 382.522 377.573 cv
382.522 377.793 li
383.348 378.144 384.158 379.056 384.952 380.526 cv
385.746 381.997 386.19 384.443 386.284 387.865 cv
386.284 389.507 li
386.284 398.28 li
386.284 402.646 li
386.284 409.387 li
386.284 414.215 386.673 417.786 387.453 420.101 cv
388.232 422.415 389.48 423.775 391.197 424.179 cv
391.197 425.014 li
388.771 424.592 387.038 423.149 385.998 420.685 cv
385.09 418.534 384.578 415.465 384.463 411.48 cv
384.438 411.48 li
384.438 409.686 li
384.438 402.646 li
384.438 398.28 li
384.438 389.507 li
384.438 386.336 li
384.438 383.687 384.11 381.689 383.454 380.342 cv
382.797 378.994 381.875 378.297 380.685 378.25 cv
380.685 377.195 li
381.851 377.148 382.768 376.448 383.436 375.095 cv
384.104 373.741 384.438 371.72 384.438 369.03 cv
384.438 365.88 li
384.438 357.086 li
384.438 352.68 li
384.438 345.64 li
384.438 343.908 li
384.462 343.908 li
384.573 339.892 385.085 336.803 385.998 334.641 cv
387.038 332.177 388.771 330.734 391.197 330.312 cv
f
FHSKMB+CambriaMath [18 0 0 -18 0 0 ]msf
391.56 362.76 mo
(\015F)sh
418.635 333.224 mo
420.876 333.224 li
420.876 333.24 li
429.84 333.24 li
429.84 334.44 li
419.88 334.44 li
419.88 334.393 li
419.285 334.393 li
414.557 350.547 li
413.704 350.547 li
410.066 342.725 li
408.58 343.384 li
408.308 342.725 li
411.191 341.407 li
414.293 348.227 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
419.88 349.08 mo
(2)sh
413.886 374.766 mo
(2)sh
408 357 mo
429.84 357 li
429.84 358.2 li
408 358.2 li
cp
ef
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
391.56 411.24 mo
(+)sh
418.635 381.704 mo
420.876 381.704 li
420.876 381.72 li
429.84 381.72 li
429.84 382.92 li
419.88 382.92 li
419.88 382.873 li
419.285 382.873 li
414.557 399.027 li
413.704 399.027 li
410.066 391.205 li
408.58 391.864 li
408.308 391.205 li
411.191 389.887 li
414.293 396.707 li
cp
f
FHSKMC+CambriaMath*1 [18 0 0 -18 0 0 ]msf
419.88 397.56 mo
(2)sh
413.886 423.246 mo
(2)sh
408 405.48 mo
429.84 405.48 li
429.84 406.68 li
408 406.68 li
cp
ef
FHSKMD+Calibri-Italic*1 [18 0 0 -18 0 0 ]msf
442.2 382.8 mo
( )sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FHSKMD+Calibri-Italic*1 uf
/FHSKMD+Calibri-Italic uf
/QJJAAA+Calibri-Italic uf
/FHSKMC+CambriaMath*1 uf
/FHSKMC+CambriaMath uf
/HIBBAA+CambriaMath uf
/FHSKMB+CambriaMath-Identity-H uf
/FHSKMB+CambriaMath /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
